<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emmanuel Arias</title>
    
    
    
    <link>https://eariassoto.github.io/</link>
    <description>Recent content on Emmanuel Arias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Dec 2021 18:19:15 +0100</lastBuildDate>
    
	<atom:link href="https://eariassoto.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game Engine Explorations: Creating the Window and rendering a simple mesh</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-creating-window/</link>
      <pubDate>Mon, 27 Dec 2021 18:19:15 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-creating-window/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;At this point, I can take the project to the graphical world. In this post, I will describe how the engine is creating and handling the window. I will also introduce an early model of the shader program and a simple mesh to render a rectangle in the window.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Game Engine Explorations: Name, Base Design and Logging</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-basic-design/</link>
      <pubDate>Thu, 23 Dec 2021 17:04:02 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-basic-design/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;In this post, I will not get to the point where I can show a graphical window. Before jumping to the graphical world, I will write about the basic design for the engine. This will only cover the entry point and the base Application class. Additionally, I will give an example of a component by implementing a logging service.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Game Engine Explorations: Hello World</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-hello-world/</link>
      <pubDate>Sat, 04 Dec 2021 03:41:43 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-hello-world/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;My previous post was an introduction to my first explorations in game engine development. In this post, I am laying down the foundation of the project. I will be using a tool that automatically creates Visual Studio solutions and Makefiles.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Game Engine Explorations: First steps</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-first-steps/</link>
      <pubDate>Thu, 02 Dec 2021 01:25:52 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-first-steps/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;This post is the first one of a series of posts where I will document my learnings on Game Engine development.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Memory allocators in C&#43;&#43; - Part 1</title>
      <link>https://eariassoto.github.io/post/memory-allocators-part-1/</link>
      <pubDate>Wed, 09 Sep 2020 23:28:52 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/memory-allocators-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;When you want to instantiate a class or a struct in the dynamic memory space, we normally use the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Minimal implementations in Modern C&#43;&#43;: Producer-Consumer problem</title>
      <link>https://eariassoto.github.io/post/producer-consumer/</link>
      <pubDate>Mon, 20 Apr 2020 14:51:44 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/producer-consumer/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;This implementation was inspired by Stackoverflow user  &lt;a href=&#34;https://stackoverflow.com/users/1774667/yakk-adam-nevraumont&#34;&gt;Yakk - Adam Nevraumont&lt;/a&gt;&amp;rsquo;s answer for a &lt;a href=&#34;https://stackoverflow.com/questions/57219650/stdcondition-variablenotify-all-only-wakes-up-one-thread-in-my-threadpool&#34;&gt;question about &lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;. I extended it to make it a working example, and I plan to use it as a base for a new project I have in mind.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Make your pointers smart - C&#43;&#43; good practices</title>
      <link>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</link>
      <pubDate>Wed, 28 Feb 2018 21:05:41 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</guid>
      <description>
        
          
          
          
        
        
        
          Ever since the C++ language was first standardized, new and delete were defined as the methods to create/delete objects dynamically. The new operator allocates a memory block to construct an object and then calls the proper class&#39; constructor to initialize it. If successful, this operator will return a pointer to the location of the memory block. Otherwise, it will return nullptr or it will throw an exception. The delete operator executes the inverse operation, it deallocates object&amp;rsquo;s memory block.
          
        
        </description>
    </item>
    
    <item>
      <title>Analyze the testing coverage of your C&#43;&#43; code</title>
      <link>https://eariassoto.github.io/post/coverage/</link>
      <pubDate>Sat, 18 Nov 2017 15:57:42 +0000</pubDate>
      
      <guid>https://eariassoto.github.io/post/coverage/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Writing unit tests is a great way to ensure that your code is behaving correctly. But how can you tell how much of your code are you testing? The GCC compiler provides tools to analyze the testing coverage of your project. In this post, I will show you how to integrate these tools in a CMake project.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Test your C&#43;&#43; code with the Google Test framework</title>
      <link>https://eariassoto.github.io/post/unit-tests/</link>
      <pubDate>Tue, 31 Oct 2017 01:53:18 +0000</pubDate>
      
      <guid>https://eariassoto.github.io/post/unit-tests/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;&lt;a href=&#34;https://eariassoto.github.io/2017/04/building-a-basic-c/c---project-template/&#34;&gt;In a previous post&lt;/a&gt;, I showed you a C/C++ template that you can use for a project. I felt that it needed a basic testing framework. Therefore, we are going to learn how to install and use the Google Test framework to write tests. When we have finished this tutorial, we will have an executable that will run tests for our code.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>First Steps With Go</title>
      <link>https://eariassoto.github.io/post/first-steps-with-go/</link>
      <pubDate>Sun, 10 Sep 2017 18:03:18 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/first-steps-with-go/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Go is a simple and powerful programming language. Its syntax is familiar to C/C++ but it definately has improvements in comparison. It has a bunch of great features such as static types, memory safety, garbage collection, and it is targeted to concurrent programming. I discovered it very recently, so I want to start simple and learn the basics of this language. In this post, we will write our first Go program and library. Also, we will learn how to unit tests our Go programs.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Source-to-source compilation with Lex-Yacc</title>
      <link>https://eariassoto.github.io/post/source-to-source-compilation-with-lex-yacc/</link>
      <pubDate>Sat, 15 Jul 2017 10:43:23 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/source-to-source-compilation-with-lex-yacc/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;In this post, I will describe a source-to-source compiler that transforms a Brainfuck program into its equivalent 64 bits assembly code. The assembly program can be built into a executable, thus allowing you to run Brainfuck programs natively.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Building a basic C/C&#43;&#43; project template</title>
      <link>https://eariassoto.github.io/post/building-a-basic-c-slash-c-plus-plus-project-template/</link>
      <pubDate>Mon, 17 Apr 2017 10:41:16 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/building-a-basic-c-slash-c-plus-plus-project-template/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;Starting a C/C++ project can be as easy or as difficult as you want. Personally, I don&amp;rsquo;t like to fire up an IDE just for a small program. So, I end up using a text editor and compiling by terminal. However, the compilation process can get tedious. In this post, we will build a simple project template for a C/C++ program. This project will use the CMake tool to handle all the compilation process.&lt;/p&gt;
          
        
        </description>
    </item>
    
  </channel>
</rss>