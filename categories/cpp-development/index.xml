<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cpp Development on Emmanuel Arias</title>
    
    
    
    <link>https://eariassoto.github.io/categories/cpp-development/</link>
    <description>Recent content in Cpp Development on Emmanuel Arias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Sep 2020 23:28:52 +0200</lastBuildDate>
    
	<atom:link href="https://eariassoto.github.io/categories/cpp-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory allocators in C&#43;&#43; - Part 1</title>
      <link>https://eariassoto.github.io/post/memory-allocators-part-1/</link>
      <pubDate>Wed, 09 Sep 2020 23:28:52 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/memory-allocators-part-1/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;When you want to instantiate a class or a struct in the dynamic memory space, we normally use the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Minimal implementations in Modern C&#43;&#43;: Producer-Consumer problem</title>
      <link>https://eariassoto.github.io/post/producer-consumer/</link>
      <pubDate>Mon, 20 Apr 2020 14:51:44 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/producer-consumer/</guid>
      <description>
        
          
          
          
        
        
        
          &lt;p&gt;This implementation was inspired by Stackoverflow user  &lt;a href=&#34;https://stackoverflow.com/users/1774667/yakk-adam-nevraumont&#34;&gt;Yakk - Adam Nevraumont&lt;/a&gt;&amp;rsquo;s answer for a &lt;a href=&#34;https://stackoverflow.com/questions/57219650/stdcondition-variablenotify-all-only-wakes-up-one-thread-in-my-threadpool&#34;&gt;question about &lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;. I extended it to make it a working example, and I plan to use it as a base for a new project I have in mind.&lt;/p&gt;
          
        
        </description>
    </item>
    
    <item>
      <title>Make your pointers smart - C&#43;&#43; good practices</title>
      <link>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</link>
      <pubDate>Wed, 28 Feb 2018 21:05:41 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</guid>
      <description>
        
          
          
          
        
        
        
          Ever since the C++ language was first standardized, new and delete were defined as the methods to create/delete objects dynamically. The new operator allocates a memory block to construct an object and then calls the proper class&#39; constructor to initialize it. If successful, this operator will return a pointer to the location of the memory block. Otherwise, it will return nullptr or it will throw an exception. The delete operator executes the inverse operation, it deallocates object&amp;rsquo;s memory block.
          
        
        </description>
    </item>
    
  </channel>
</rss>