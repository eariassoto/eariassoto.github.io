<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Game development on Emmanuel Arias</title>
    <link>https://eariassoto.github.io/categories/game-development/</link>
    <description>Recent content in Game development on Emmanuel Arias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©2017-2021 Emmanuel Arias.</copyright>
    <lastBuildDate>Thu, 02 Dec 2021 01:25:52 +0100</lastBuildDate>
    
        <atom:link href="https://eariassoto.github.io/categories/game-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Game Engine Explorations: Hello World</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-hello-world/</link>
      <pubDate>Sat, 04 Dec 2021 03:41:43 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-hello-world/</guid>
      <description>&lt;p&gt;My previous post was an introduction to my first explotations in game engine development. In this post, I am laying down the foundation of the project. I will be using a tool that automatically creates Visual Studio solutions and Makefiles.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;This first iteration consists of an executable program that calls a function from a static library. This is how the folder structure looks like without any configuration files:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;└───sources
    ├───engine_lib
    │   │
    │   └───engine_lib
    │           hello.cpp
    │           hello.h
    │
    └───game_app
            main.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The main function is quite simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;engine_lib/hello.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;/*argc*/&lt;/span&gt;, &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;/*argv*/&lt;/span&gt;[])
{
    say_hello();

    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The static library is also as simple as it gets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// .h
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#pragma once
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;say_hello&lt;/span&gt;();

&lt;span style=&#34;color:#586e75&#34;&gt;// .cpp
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;hello.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;say_hello&lt;/span&gt;() { std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello World!&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;; }

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also added a &lt;code&gt;.clang-format&lt;/code&gt; file in the &lt;code&gt;sources&lt;/code&gt; foldder with some personal preferences:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;---
BasedOnStyle: Google
IndentWidth: 4
BreakBeforeBraces: Linux
SortIncludes: false
PointerAlignment: Left
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Visual Studio will recognize the format file and apply it to source files in this project. I can also use it to configure it source files formatting in editors like Vim.&lt;/p&gt;
&lt;h2 id=&#34;choosing-the-build-configurator-tool&#34;&gt;Choosing the build configurator tool&lt;/h2&gt;
&lt;p&gt;I used to go with CMake to setup my C++ projects, but I found two alternatives that I better target large projects. At my current job at Ubisoft, we use a tool called Sharpmake. It takes a C# program as input that defines your solutions and projects. Sharpmake support multiple platforms, for our interests, it can generate Visual Studio solutions and Makefiles. This tool has an &lt;a href=&#34;https://github.com/ubisoft/Sharpmake&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;open source version&lt;/a&gt;
 available to use. A similar and more popular tool is &lt;a href=&#34;https://premake.github.io/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Premake&lt;/a&gt;
. Premake comes as a lightweight executable that reads Lua files that can generate VS solutions and Makefiles as well. I have decided to use Premake for this project.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-premake&#34;&gt;Setting up Premake&lt;/h2&gt;
&lt;p&gt;To make things easier, I will create a &lt;code&gt;premake&lt;/code&gt; folder that will hold the binaries and the main Lua project file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├───premake
│   │   premake5.lua
│   │
│   └───bin
│       └───win64
│               LICENSE.txt
│               premake5.exe
│
└───sources
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The default filename for Premake script files is&lt;code&gt;premake5.lua&lt;/code&gt;. In this file, I will configure my main workspace. Premake generator translates this workspace to VS solutions and Makefiles. Let´s look this file by pieces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- Copyright (c) 2021 Emmanuel Arias&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; ROOT &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;../&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paths in Premake are relative to where the current &lt;code&gt;.lua&lt;/code&gt; file is located. For consistent paths, I will define a local variable &lt;code&gt;ROOT&lt;/code&gt; in every script. This variable will help me to share global path variables.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- _ACTION is set to nil when premake is run but no generation is needed&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- for example &amp;#34;premake5 -help&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; gen_action &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;NULL&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;if&lt;/span&gt; _ACTION &lt;span style=&#34;color:#719e07&#34;&gt;~=&lt;/span&gt; nill &lt;span style=&#34;color:#268bd2&#34;&gt;then&lt;/span&gt; gen_action &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; _ACTION &lt;span style=&#34;color:#268bd2&#34;&gt;end&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; GEN_FOLDER &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;generated/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; gen_action &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I am setting up the folder where Premake will use to create the project files. Everything in this folder is generated and should be omitted by the version control system. &lt;code&gt;_ACTION&lt;/code&gt; is a global variable set by Premake and it stores the action set by the user. You can find more info &lt;a href=&#34;https://premake.github.io/docs/_ACTION/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
. For example, if I execute these two commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; premake5 vs2019
&amp;gt; premake5 gmake
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I will get two folders: &lt;code&gt;generated/vs2019&lt;/code&gt; and &lt;code&gt;generated/gmake&lt;/code&gt; with two different and independent configurations. This also means that I will get separate folders with the binary files by the VS solutions and the Makefiles.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- Global variables&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;/sources/%{prj.name}/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; OUTPUT_DIR &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;%{cfg.buildcfg}-%{cfg.architecture}/&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;TARGET_FOLDER &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (GEN_FOLDER &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;target/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;/%{prj.name}/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; OUTPUT_DIR)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;INTERMEDIATE_FOLDER &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (GEN_FOLDER &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;intermediate/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;/%{prj.name}/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; OUTPUT_DIR)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I define global variables for the projects&#39; lua scripts. Premake projects need to know where source files are and where to save internediate and output files. The &lt;code&gt;intermediate/&lt;/code&gt; folder is not relevant for me, but &lt;code&gt;target/&lt;/code&gt; will have all the executables and library files. The variables you see in between  &lt;code&gt;%{ }&lt;/code&gt; are Premake tokens. These tokens are replaced in runtime and you can find more info &lt;a href=&#34;https://premake.github.io/docs/Tokens&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;workspace &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Tamarindo Engine&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;   startproject &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;game_app&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;   filename &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;tamarindo_engine&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;   location (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; GEN_FOLDER)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;22&lt;/span&gt;   configurations { &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Debug&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Release&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;23&lt;/span&gt;   platforms { &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x32&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x64&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;25&lt;/span&gt;   filter &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;configurations:Debug&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;26&lt;/span&gt;      defines { &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;DEBUG&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;27&lt;/span&gt;      symbols  &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;On&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;28&lt;/span&gt;   
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;29&lt;/span&gt;   filter &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;configurations:Release&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;30&lt;/span&gt;      defines { &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;NDEBUG&amp;#34;&lt;/span&gt; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;31&lt;/span&gt;      optimize &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;On&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;32&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;33&lt;/span&gt;   filter &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;platforms:x64&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;34&lt;/span&gt;      architecture &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x86_64&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;35&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;36&lt;/span&gt;   filter &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;platforms:x32&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;37&lt;/span&gt;      architecture &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;x86&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;38&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;39&lt;/span&gt;   flags {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;40&lt;/span&gt;      &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;FatalWarnings&amp;#34;&lt;/span&gt;,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;41&lt;/span&gt;      &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;MultiProcessorCompile&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;42&lt;/span&gt;   }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I start declaring the main workspace. It has simple configurations: it supports 32 and 64 bits architetures, and defines two optimization levels. For VS solutions, I can define a start-up project. This project will be the executable application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;44&lt;/span&gt;include (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;sources/engine_lib&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;45&lt;/span&gt;include (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;sources/game_app&amp;#34;&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, I need to include the two projects: the engine library and the application. Premake expects &lt;code&gt;premake5.lua&lt;/code&gt; files in both of those folders.&lt;/p&gt;
&lt;p&gt;The script for the engine library is quite simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- Copyright (c) 2021 Emmanuel Arias&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; ROOT &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;../../&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;project &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;engine_lib&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;   kind &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;StaticLib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;   language &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;   cppdialect &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++17&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;   staticruntime &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;   targetdir (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; TARGET_FOLDER)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;   objdir (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; INTERMEDIATE_FOLDER)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;   files {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;       (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;engine_lib/**.h&amp;#34;&lt;/span&gt; ),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;       (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;engine_lib/**.cpp&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;    includedirs {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;      (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;engine_lib&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;    }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This script is very self-explanatory. From this snippet, I like that the &lt;code&gt;kind&lt;/code&gt; command makes configuration easier. The application project script has few differences:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;-- Copyright (c) 2021 Emmanuel Arias&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;local&lt;/span&gt; ROOT &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;../../&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;project &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;game_app&amp;#34;&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;   kind &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;ConsoleApp&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;   language &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;   cppdialect &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;C++17&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;   staticruntime &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;on&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;   targetdir (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; TARGET_FOLDER)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;   objdir (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; INTERMEDIATE_FOLDER)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;   files {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;       (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;**.h&amp;#34;&lt;/span&gt; ),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;       (ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; PROJECT_ROOT &lt;span style=&#34;color:#719e07&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;**.cpp&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;    includedirs {
&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;../engine_lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;21&lt;/span&gt;
&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;22&lt;/span&gt;    links {
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;23&lt;/span&gt;        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;engine_lib&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;display:block;width:100%;background-color:#19404a&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;24&lt;/span&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Last thing I need to make things easier is to create a batch script to run Premake.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bat&#34; data-lang=&#34;bat&#34;&gt;:&lt;span style=&#34;color:#586e75&#34;&gt;: Copyright (c) 2021 Emmanuel Arias&lt;/span&gt;
@&lt;span style=&#34;color:#719e07&#34;&gt;echo&lt;/span&gt; off

&lt;span style=&#34;color:#719e07&#34;&gt;call&lt;/span&gt; premake\bin\win64\premake5.exe --file=premake/premake5.lua vs2019
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After running the script, my project folder will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://eariassoto.github.io/static/img/engine_explorations/base_struct.PNG&#34;
        alt=&#34;Base project structure&#34;/&gt;&lt;/p&gt;
&lt;p&gt;I can run the executable from Visual Studio, or I can go and execute it in the &lt;code&gt;target&lt;/code&gt; folder. You can find this code in the project&amp;rsquo;s &lt;a href=&#34;https://github.com/eariassoto/tamarindo_engine/tree/a4ca92dbdb4bca9a467d26275929db3588e9f1e1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Github repo&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;That is all for now :). In the next post, I will lay down the basic class hierarchy and main function for the engine.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Engine Explorations: First steps</title>
      <link>https://eariassoto.github.io/post/game-engine-explorations-first-steps/</link>
      <pubDate>Thu, 02 Dec 2021 01:25:52 +0100</pubDate>
      
      <guid>https://eariassoto.github.io/post/game-engine-explorations-first-steps/</guid>
      <description>&lt;p&gt;This post is the first one of a series of posts where I will document my learnings on Game Engine development.&lt;/p&gt;
&lt;p&gt;From all the roles within sofware engineering, I am most attracted to Software Architecture. To prepare myself for this path, I like to study software systems, understand how they work and implement my own version. I find satisfaction in designing the small pieces, testing them and putting them all together. It is a long process that requires patience and dedication, but hey, here goes my attempt at creating my own engine.&lt;/p&gt;
&lt;p&gt;Game engines fall under this category of complex software systems. They help developers create videogames faster by putting the heaviest workload off their shoulders.&lt;/p&gt;
&lt;p&gt;These engines come in all sizes. Commercial engines such as Unity, Godot or Unreal Engine are developed by hundreds of people and they offer the users rich UX interfaces. Videogames companies develop their own large scale in-house engines for their own games.&lt;/p&gt;
&lt;p&gt;Given that I will take on this project by myself, I will not attempt to implement a commercial engine, nor a large scale engine. My first goal will be to create a simple 3D rendering engine, choose a particular game genre (FPS, RTS, platformer, for example), to finally create a game with the engine.&lt;/p&gt;
&lt;h2 id=&#34;setting-initial-goals&#34;&gt;Setting initial goals&lt;/h2&gt;
&lt;p&gt;As I mentioned before, I will start designing enough engine code so that I can render a 3D mesh with textures and some basic camera and lighting. For better performance and portability, I will be using C++ as main programming language. I will try to target Windows and Linux as platforms.&lt;/p&gt;
&lt;p&gt;The next diagram shows a rough design of the project:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  +--------------+
  |   external   |
  | dependencies |
  +-------+------+
          |
+---------v--------+    +---------------------+   +------------+
|    Engine Code   +----&amp;gt;      Game Code      |   |    Game    |
| (static library) |    |(application project)+---&amp;gt;(executable)|
+------------------+    +----------^----------+   +------------+
                                   |
                           +-------+------+
                           |   external   |
                           | dependencies |
                           +--------------+
  +------------------+
  |    Asset files   |      +--------------+     +-------------+
  |(meshes, textures,|      | Data parsing |     |  Game Data  |
  | shaders, sounds) +------&amp;gt;   scripts    +-----&amp;gt;(binary file)|
  +------------------+      +--------------+     +-------------+

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The engine code compiles to a static library that the different application projects can share. The reason of using a static library is performance. It is normal to have a single videogame running in a machine so we would gain little to nothing from having the code in a dynamic library. Moreover, calls to functions inside a dynamic linked library are more expensive.&lt;/p&gt;
&lt;p&gt;The game logic is the pieces of code that relate to the game itself. This code will compile as an executable that links to the engine code library. As a first approach, this application will be in charge of registering the assets and rendering meshes. In the future, I expect to have a scene manager and a resources manager to deal with assets in a better way.&lt;/p&gt;
&lt;p&gt;In the previous diagram I added the game data as a binary file. This will be part of the second iteration of the project. Once I have a proper resources manager, I will be able to add additional code to load assets from an optimized file with my own specifications. As a starting point, loading individual files is okay.&lt;/p&gt;
&lt;h2 id=&#34;finding-resources&#34;&gt;Finding resources&lt;/h2&gt;
&lt;p&gt;This is a list of books and resources I am using to start the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Game Engine Architecture - Jason Gregory&lt;/strong&gt;: This one is my main guide. I have read first parts so far but I have enough learnings to go and jump to practice. This book covers the topics at a broader scale. The next books I selected will go deeper into a specific topic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3D Math Primer for Graphics and Game Development - Fletcher Dunn&lt;/strong&gt;: I got this one to refresh my math skills for 3D rendering.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Introduction to 3D Game Programming with DirectX 11 - Frank Luna&lt;/strong&gt;: I am new to graphics programming so I will use DirectX11 as one of the APIs to start this engine. This API is still used, and it is easier to grasp for a rookie programmer than DirectX12 and Vulkan.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://learnopengl.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;learnopengl.com&lt;/a&gt;
&lt;/strong&gt;: The other graphical I will use API for the engine is OpenGL. This API abstracts configuration details, but modern version provide more control to the programmer. It will also be useful to provide support to GNU/Linux platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCQ-W1KE9EYfdxhL6S4twUNw&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;The Cherno - Youtube channel&lt;/a&gt;
&lt;/strong&gt;: This channel has an awesome series on game engine development. The first videos on their series have helped me greatly to jumpstart my project.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;so-what-is-left&#34;&gt;So what is left?&lt;/h2&gt;
&lt;p&gt;Now comes the fun part, code! In the next post, I will be setting up the build system and the project configuration. I promise to end up with a classic Hello World! :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Memory allocators in C&#43;&#43; - Part 1</title>
      <link>https://eariassoto.github.io/post/memory-allocators-part-1/</link>
      <pubDate>Wed, 09 Sep 2020 23:28:52 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/memory-allocators-part-1/</guid>
      <description>&lt;p&gt;When you want to instantiate a class or a struct in the dynamic memory space, we normally use the &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; operators.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Point&lt;/span&gt; {
	&lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt; m_X;
	&lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt; m_Y;
	&lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt; m_Z;
  &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
    Point(&lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt;, &lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt;, &lt;span style=&#34;color:#dc322f&#34;&gt;float&lt;/span&gt;);
};

Point&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; my_point &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Point(&lt;span style=&#34;color:#2aa198&#34;&gt;0.f&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;12.5f&lt;/span&gt;, &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0.5f&lt;/span&gt;);
&lt;span style=&#34;color:#586e75&#34;&gt;// use point
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;delete&lt;/span&gt; my_point;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what happens under the hood for these operators? The &lt;code&gt;new&lt;/code&gt; operator asks the operative system for a block of memory of size &lt;code&gt;sizeof(Point)&lt;/code&gt;. Then, it calls the class constructor and returns the allocated memory pointer. Similarly, &lt;code&gt;delete&lt;/code&gt; calls the class destructor and then free the memory block. The operative system handles dynamic memory allocation. Therefore these two operators need to do a system call. A system call is expensive because it interrupts the program&amp;rsquo;s execution so that a kernel routine can allocate/free the memory.&lt;/p&gt;
&lt;p&gt;When performance is not a concern, this way of allocating/freeing memory is all right. However, if our program will continuously use dynamic-allocated objects, we will need a better strategy.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;new-expression&lt;/code&gt; we just saw has optional placement parameters. If we provide a memory address as a parameter, the &lt;code&gt;new&lt;/code&gt; function will use that memory location to construct our object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; memPtr &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; malloc(&lt;span style=&#34;color:#719e07&#34;&gt;sizeof&lt;/span&gt;(Point)); &lt;span style=&#34;color:#586e75&#34;&gt;// allocate enough memory
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;Point&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; my_point_2 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; (memPtr) Point(&lt;span style=&#34;color:#2aa198&#34;&gt;0.f&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;12.5f&lt;/span&gt;, &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0.5f&lt;/span&gt;);
&lt;span style=&#34;color:#586e75&#34;&gt;// use point
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;//
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;my_point_2&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;~&lt;/span&gt;Point();
free(memPtr);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this scenario, we cannot use &lt;code&gt;delete&lt;/code&gt;. The &lt;code&gt;delete&lt;/code&gt; operator can only free memory allocated by the new operator. We have to call the destructor first, and then free the memory. However, we have the same problem because we are allocating space for only one object.&lt;/p&gt;
&lt;p&gt;The solution to our problem would be to have one large allocation at the beginning of our program. The allocator would be responsible for distributing that memory. When we do not need to allocate anymore, we make one call to free the memory.&lt;/p&gt;
&lt;p&gt;In this series of articles, we will look into some memory allocators designs that help to solve this problem. In these articles, you will find details about their basic operations and the pros/cons they entail. For this first part, stack allocators will be our topic.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;image-container&#34;&gt;&lt;span class=&#34;link&#34;&gt;&lt;img class=&#34;img&#34; src=&#34;https://eariassoto.github.io/static/img/stack.jpg&#34;
        alt=&#34;Stack of punch cards&#34;/&gt;&lt;/span&gt;&lt;span class=&#34;caption&#34;&gt;&lt;span class=&#34;title&#34;&gt;A stack of punch cards&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;A simple way to allocate memory is by using a stack. A stack allocator can return a marker that points to the top of it. When a new memory block that fits in the available space is requested, the allocator changes the marker pointer. Freeing memory is performed by passing a marker pointer to the allocator. The allocator will set that pointer as the new marker pointer and release the block in-between.&lt;/p&gt;
&lt;p&gt;A more visual explanation is in the figure below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; size_t ALLOCATOR_SIZE_IN_BYTES &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;64&lt;/span&gt;;
StackAllocator allocator{ALLOCATOR_SIZE_IN_BYTES};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       +------------------------------------------------------------------+
       |                                                                  |
       |                              AVAILABLE                           |
       |                                                                  |
       +------------------------------------------------------------------+
       ^                                                                  ^
       |                                                                  |
       +                                                                  +
 Lowest address                                                    Highest address
 Current Marker                                                        0x0040
     0x0000
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Point&lt;/span&gt; {
	&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; x;
	&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; y;
};
Marker base_marker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; allocator.GetMarker();

&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; address &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; allocator.Allocate(&lt;span style=&#34;color:#719e07&#34;&gt;sizeof&lt;/span&gt;(Point));
Point&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; my_point_1 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; (address) Point();

Point&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; my_point_2 &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; ( allocator.Allocate(&lt;span style=&#34;color:#719e07&#34;&gt;sizeof&lt;/span&gt;(Point)) ) Point();
&lt;span style=&#34;color:#586e75&#34;&gt;// use points ..
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      +-------+-------+--------------------------------------------------+
      |       |       |                                                  |
      |point_1|point_2|                     AVAILABLE                    |
      |       |       |                                                  |
      +-------+----------------------------------------------------------+
      ^               ^                                                  ^
      |               |                                                  |
      +               +                                                  +
Lowest address Current Marker                                     Highest address
  base_marker       0x0010                                             0x0040
    0x0000
&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;allocator.FreeToMarker(base_marker);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       +------------------------------------------------------------------+
       |                                                                  |
       |                              AVAILABLE                           |
       |                                                                  |
       +------------------------------------------------------------------+
       ^                                                                  ^
       |                                                                  |
       +                                                                  +
 Lowest address                                                    Highest address
 Current Marker                                                        0x0040
     0x0000base_marker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will go over the main functions of my stack allocator. We will leave behind simple functions, like setters and getters. The constructor tries to allocate the requested size and saves the size of it. The initial marker pointer starts as 0. This because it is going to be an offset from the initial address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;StackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;StackAllocator(size_t stackSizeInBytes)
    &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; m_StackSizeInBytes{stackSizeInBytes}, m_CurrentMarker{&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;} {
    m_AllocatedMemory &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; malloc(m_StackSizeInBytes);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The allocate function checks for the available memory and calculates the new address and marker pointer if the requested size fits. In my implementation, the memory grows from bottom to top because it assumes an x86 architecture, and the allocated memory comes from the heap.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; StackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;Allocate(size_t sizeInBytes) {
    assert(m_AllocatedMemory &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; size_t availableSize &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; m_StackSizeInBytes &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; m_CurrentMarker;
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (sizeInBytes &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; availableSize &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;=&lt;/span&gt; sizeInBytes) {
        Marker newMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; m_CurrentMarker &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; sizeInBytes;
        uintptr_t assignedAddress &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#719e07&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;uintptr_t&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(m_AllocatedMemory) &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; newMarker;
        m_CurrentMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; newMarker;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&lt;/span&gt;(assignedAddress);
    }
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;nullptr&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The free function is as simple as it can be. It will only check that the marker to free the memory is a number between 0 and the current marker pointer. An invalid marker pointer will cause memory corruption. The allocator assumes that the user will use the provided function to store all the necessary marker pointers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; StackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;FreeToMarker(Marker marker) {
    &lt;span style=&#34;color:#586e75&#34;&gt;// Important: markers are not checked. I.e. a random marker
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// can be passed, thus corrupting memory
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (marker &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; m_CurrentMarker) {
        m_CurrentMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; marker;
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The stack implementation is simple and naïve. The allocator does not keep track of the valid markers. The user is in charge of giving a valid pointer to free. Otherwise, the next memory block to be allocation might be already in use.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;code&gt;clear&lt;/code&gt; function is a one-line function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; StackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;Clear() { m_CurrentMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;stack-allocator-make-it-double&#34;&gt;Stack allocator? Make it double&lt;/h1&gt;
&lt;p&gt;This kind of allocator is useful when you need to allocate blocks of data that do not persist in time. Let&amp;rsquo;s suppose we have a stack allocator to handle the dynamic memory used when processing a game&amp;rsquo;s frame. Functions can then save the last marker pointer, make use of a block of memory, and set the allocator back to the previous state. At the end of the frame, we clear the allocator, and it will be ready for the next frame.&lt;/p&gt;
&lt;p&gt;Another example is to allocate linear data. Imagine a platform game where your character can move through 2D maps.  Let&amp;rsquo;s say that the player enters a dungeon map, and then the boss area. We could use a stack allocator to load the maps&#39; resources. When the player leaves the boss&#39; area, the stack allocator frees the entire level&amp;rsquo;s resources at once.&lt;/p&gt;
&lt;p&gt;What would happen if you have both necessities? On one side, we have a memory that will be persistent for some amount of time. On the other side, we would like to have an allocator for quick, temporary memory allocations. For these cases, we can upgrade our stack allocator to a double-ended stack allocator.&lt;/p&gt;
&lt;p&gt;A visual example of this type of allocator:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      +-------+-------+-------+-------------------------+------+----+----+
      |       |       |       |                         |      |    |    |
      |level_1|level_2|level_3|        AVAILABLE        |      |    |    |
      |       |       |       |                         |      |    |    |
      +-------+-------+----------------------------------------+----+----+
      ^                       ^                         ^                ^
      |                       |                         |                |
      +                       +                         +                +
Lowest address           Lower Marker              Upper Marker   Highest address
  base_marker               0x0010                   0x0090            0x0100
    0x0000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The implementation of this stack is very similar to the simple stack allocator. Instead of one maker pointer, we will have to. The lower marker pointer will reference the memory allocated from the bottom of the stack. Similarly, the upper marker pointer refers to the memory allocated from the top. As you may imagine, the allocator calculates the available memory from these two pointers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; DoubleStackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;AllocateLower(size_t sizeInBytes) {
    assert(m_AllocatedMemory &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;);
    assert(m_UpperMarker &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; m_LowerMarker);
    &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; size_t availableSize &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; m_UpperMarker &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; m_LowerMarker;
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (sizeInBytes &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; availableSize &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;=&lt;/span&gt; sizeInBytes) {
        Marker newMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; m_LowerMarker &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; sizeInBytes;
        uintptr_t assignedAddress &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
            &lt;span style=&#34;color:#719e07&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;uintptr_t&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(m_AllocatedMemory) &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; newMarker;
        m_LowerMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; newMarker;
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;reinterpret_cast&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&lt;/span&gt;(assignedAddress);
    }
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;nullptr&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &amp;ldquo;free&amp;rdquo; function also checks that the markers will not corrupt the other end of the allocator. However, it won&amp;rsquo;t validate marker pointers within the stack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; DoubleStackAllocator&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;FreeToUpperMarker(Marker marker) {
    &lt;span style=&#34;color:#586e75&#34;&gt;// Important: markers are not checked. I.e. a random marker
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// can be passed, thus corrupting memory
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (marker &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; m_UpperMarker &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; marker &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; m_StackSizeInBytes) {
        m_UpperMarker &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; marker;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That should cover the overall implementation of this simple memory allocator. You can find the full source code in &lt;a href=&#34;https://github.com/eariassoto/custom-allocators-cpp&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this repository&lt;/a&gt;
. For the next article, we will go into the details of pool allocators.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Minimal implementations in Modern C&#43;&#43;: Producer-Consumer problem</title>
      <link>https://eariassoto.github.io/post/producer-consumer/</link>
      <pubDate>Mon, 20 Apr 2020 14:51:44 +0200</pubDate>
      
      <guid>https://eariassoto.github.io/post/producer-consumer/</guid>
      <description>&lt;p&gt;This implementation was inspired by Stackoverflow user  &lt;a href=&#34;https://stackoverflow.com/users/1774667/yakk-adam-nevraumont&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Yakk - Adam Nevraumont&lt;/a&gt;
&amp;rsquo;s answer for a &lt;a href=&#34;https://stackoverflow.com/questions/57219650/stdcondition-variablenotify-all-only-wakes-up-one-thread-in-my-threadpool&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;question about &lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;
. I extended it to make it a working example, and I plan to use it as a base for a new project I have in mind.&lt;/p&gt;
&lt;h2 id=&#34;what-is-the-producer-consumer-problem&#34;&gt;What is the Producer-Consumer problem?&lt;/h2&gt;
&lt;p&gt;This problem is a classic example of synchronization and parallel computing. Suppose you have available multiple execution threads. In addition to that, you also have tasks that can be executed at the same time, independent from each other. The problem now is how we distribute the tasks between those threads.&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://eariassoto.github.io/static/img/prodcons.png&#34;
        alt=&#34;Producer - Consumer problem&#34;/&gt;&lt;/p&gt;
&lt;p&gt;In a simple producer-consumer problem, the producer will create tasks and push them to a queue. The queue thread will handle the synchronization. The consumer threads will wake up only when they have to execute a task. When the consumer thread finishes a task, it sleeps until the queue thread sends a new signal.&lt;/p&gt;
&lt;h2 id=&#34;to-the-implementation&#34;&gt;To the implementation&lt;/h2&gt;
&lt;p&gt;In C++11 a new synchronization primitive was introduced: &lt;a href=&#34;https://en.cppreference.com/w/cpp/thread/condition_variable&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;&lt;code&gt;std::condition_variable&lt;/code&gt;&lt;/a&gt;
. This primitive allows us to block one or more threads until a shared state is modified and the thread, or threads, has been modified. This primitive needs a &lt;code&gt;std::mutex&lt;/code&gt; for the blocker thread to modify the stated state, and for the blocked threads to wait on the condition variable.&lt;/p&gt;
&lt;p&gt;As an overview, our producer and queue will be on the same thread. Our consumers will run on separate threads and will get the &lt;code&gt;std::condition_variable&lt;/code&gt; and &lt;code&gt;std::mutex&lt;/code&gt; from the queue. They will start a loop in which they will wait on the condition variable and check if there is a new task, or if the queue has stopped pushing new tasks. Our sample program will send 10 tasks, wait for an amount of time, and stop the queue.&lt;/p&gt;
&lt;p&gt;The task we are going to push into the queue is going to be very simple. It will require an Id number, a duration in milliseconds, and a mutex.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#pragma once
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;chrono&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Task&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;   &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;    Task(&lt;span style=&#34;color:#dc322f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; id, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;milliseconds duration,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;         std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; coutMutex);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Execute&lt;/span&gt;();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;GetId&lt;/span&gt;() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; m_Id; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;   &lt;span style=&#34;color:#719e07&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; m_Id &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;milliseconds m_Duration;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; m_CoutMutex;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are going to use this mutex to have exclusive use in the &lt;code&gt;std::cout&lt;/code&gt; buffer. Otherwise, our messages are going to be all mixed out in the standard output.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Execute&lt;/code&gt; method will also be very simple: it will sleep the thread for the &lt;code&gt;m_Duration&lt;/code&gt; milliseconds, and print out this duration before exiting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; Task&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;Execute() {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;2&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;sleep_for(m_Duration);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;3&lt;/span&gt;    {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;4&lt;/span&gt;        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;scoped_lock&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; guard(m_CoutMutex);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;5&lt;/span&gt;        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Task {&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m_Id &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;} finished in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; m_Duration.count()
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;6&lt;/span&gt;                  &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;ms.&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;7&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;8&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;std::scoped_lock&lt;/code&gt; was introduced in C++17 and it works similarly as &lt;code&gt;std::lock_guard&lt;/code&gt;. One difference is that &lt;code&gt;std::scoped_lock&lt;/code&gt; allows us to try to acquire more than one &lt;code&gt;std::mutex&lt;/code&gt;, preventing possible deadlocks.&lt;/p&gt;
&lt;p&gt;It is very important to surround the critical section in brackets. That will make the lock to release the &lt;code&gt;std::mutex&lt;/code&gt; as soon as it is no longer needed. Remember that &lt;code&gt;std::scoped_lock&lt;/code&gt; behaves according to the &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/raii&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;RAII principle&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;We are going to implement a &lt;code&gt;TaskQueue&lt;/code&gt; class to wrap our &lt;code&gt;std::queue&lt;/code&gt; and our synchronization mechanism.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#pragma once
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;mutex&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;tuple&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Task&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;TaskQueue&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;   &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;TaskQueue();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// Thread safe functions for producers
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;PushTask&lt;/span&gt;(Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;PushTasks&lt;/span&gt;(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Task&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&amp;amp;&lt;/span&gt; tasks);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;StopQueue&lt;/span&gt;();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// Way for consumers to get the sync variables
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;tuple&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;condition_variable&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt; Subscribe();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;    
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// Non-thread safe function. Consumers must ensure
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#586e75&#34;&gt;// lock acquisition
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;22&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;HasPendingTask&lt;/span&gt;() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;!&lt;/span&gt;m_Queue.empty(); }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;23&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;IsQueueStopped&lt;/span&gt;() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; m_QueueIsStopped; }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;24&lt;/span&gt;    Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;GetNextTask&lt;/span&gt;();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;25&lt;/span&gt;   
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;26&lt;/span&gt;   &lt;span style=&#34;color:#719e07&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;27&lt;/span&gt;    &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt; m_QueueIsStopped &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;28&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;queue&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Task&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&lt;/span&gt; m_Queue;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;29&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex m_Mutex;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;30&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;condition_variable m_ConditionVariable;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;31&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Producers will interact with this queue by pushing &lt;code&gt;Task&lt;/code&gt; instances. In our case, we will handle the object destruction in the queue, but it can be improved with smart pointers. &lt;code&gt;StopQueue&lt;/code&gt; will allow the producer to stop the queue and send a signal to the consumers that the queue is no longer pushing new tasks.&lt;/p&gt;
&lt;p&gt;Consumers will get access to the &lt;code&gt;std::mutex&lt;/code&gt;, and &lt;code&gt;std::condition_variable&lt;/code&gt; to wait for new tasks. The &lt;code&gt;PushTask&lt;/code&gt; and &lt;code&gt;PushTasks&lt;/code&gt; functions will acquire the mutex to exclusively add new tasks. After that, the lock is no longer needed to wake up the waiting threads.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; TaskQueue&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;PushTask(Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; t) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;    {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;scoped_lock l{m_Mutex};
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;        m_Queue.push(t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;    m_ConditionVariable.notify_one();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;}
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; TaskQueue&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;PushTasks(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Task&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&amp;amp;&lt;/span&gt; tasks) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;    {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;scoped_lock l{m_Mutex};
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; t : tasks) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;            m_Queue.push(t);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;        }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    m_ConditionVariable.notify_all();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the consumers awake, they will use the non-thread safe functions to verify if they need to either: consume a new task, or finish execution because the queue will no longer send new tasks.&lt;/p&gt;
&lt;p&gt;For the consumer thread, I will break the method for a more detailed look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;WorkerThread&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; workerId, TaskQueue&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; taskQueue,
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;2&lt;/span&gt;                  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; coutMutex) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;3&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; [m, cv] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; taskQueue.Subscribe();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;4&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This declaration is a new feature introduced in C++17 called &lt;a href=&#34;https://en.cppreference.com/w/cpp/language/structured_binding&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Structured binding declaration&lt;/a&gt;
. It makes the declaration more readable, and it is the same as declaring and assigning to a &lt;code&gt;std::tuple&lt;/code&gt;. Now that we have the synchronization mechanism, we can go into our main loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#b58900&#34;&gt;true&lt;/span&gt;) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;auto&lt;/span&gt; data &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;]() &lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;optional&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Task&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;            std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_lock l{m};
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;            cv.wait(l, [&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;] {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; taskQueue.IsQueueStopped() &lt;span style=&#34;color:#719e07&#34;&gt;||&lt;/span&gt; taskQueue.HasPendingTask();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;            });
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;            &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (taskQueue.IsQueueStopped()) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; {};
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;            } &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;                Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; taskToProcess &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; taskQueue.GetNextTask();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;                assert(taskToProcess &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;nullptr&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;                &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; taskToProcess;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;            }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;        }();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will try to get out Task using C++17&amp;rsquo;s &lt;code&gt;std::optional&lt;/code&gt;. This container allows us to create an instance that may not have a value after initialization. The worker thread will wait for it to be woken up inside of the &lt;code&gt;std::optional&lt;/code&gt; constructor. If the task queue has a pending task, we will get it and return it as the value inside the &lt;code&gt;std::optional&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;!&lt;/span&gt;data) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;            &lt;span style=&#34;color:#719e07&#34;&gt;break&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;        }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;21&lt;/span&gt;        Task&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; taskPtr &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;task;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;22&lt;/span&gt;        {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;23&lt;/span&gt;            std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;scoped_lock&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; guard(coutMutex);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;24&lt;/span&gt;            std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Worker {&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; workerId &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;} is executing task {&amp;#34;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;25&lt;/span&gt;                      &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; taskPtr&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;GetId() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;}.&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;26&lt;/span&gt;        }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;27&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;28&lt;/span&gt;        &lt;span style=&#34;color:#586e75&#34;&gt;// process the data
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;        taskPtr&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;Execute();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;30&lt;/span&gt;        &lt;span style=&#34;color:#719e07&#34;&gt;delete&lt;/span&gt; taskPtr;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;31&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;32&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the &lt;code&gt;std::optional&lt;/code&gt; returns without a value, the thread ends execution. Otherwise we print a debug message and execute the task.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s put it all together in our main function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; argv[]) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 2&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; thread_pool_size &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 3&lt;/span&gt;        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;hardware_concurrency() &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 4&lt;/span&gt;    assert(thread_pool_size &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 5&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 6&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mutex coutMutex;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 7&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 8&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;thread&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; thread_pool(thread_pool_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt; 9&lt;/span&gt;    TaskQueue taskQueue;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;11&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (size_t i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; thread_pool_size; &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;i) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;12&lt;/span&gt;        thread_pool[i] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;thread&lt;/span&gt;(WorkerThread, i, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ref(taskQueue),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;13&lt;/span&gt;                                     std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ref(coutMutex));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;14&lt;/span&gt;    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we create an array of worker threads. At this point they will start execution and immediately sleep until we push new tasks.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;15&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;random_device rd;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;16&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;mt19937 gen(rd());
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;17&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;uniform_int_distribution&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; taskDuration(&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1000&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;18&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;19&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;i) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;20&lt;/span&gt;        taskQueue.PushTask(
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;21&lt;/span&gt;            &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Task(i, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;milliseconds(taskDuration(gen)),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;22&lt;/span&gt;                     std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ref(coutMutex)));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;23&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;24&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;25&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;vector&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Task&lt;span style=&#34;color:#719e07&#34;&gt;*&amp;gt;&lt;/span&gt; taskBatch;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;26&lt;/span&gt;    taskBatch.resize(&lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;27&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;i) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;28&lt;/span&gt;        taskBatch[i] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;29&lt;/span&gt;            &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Task(i &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;milliseconds(taskDuration(gen)),
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;30&lt;/span&gt;                     std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ref(coutMutex));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;31&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;32&lt;/span&gt;    taskQueue.PushTasks(taskBatch);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually, the producer thread is also a loop that creates tasks until the program finishes. For our example, we will create only 10 tasks with random durations. The duration is a random value from 0 to 1000 milliseconds.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;33&lt;/span&gt;    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;this_thread&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;sleep_for(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;seconds(&lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;));
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;34&lt;/span&gt;    taskQueue.StopQueue();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;35&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;36&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; (size_t i &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt; thread_pool_size; &lt;span style=&#34;color:#719e07&#34;&gt;++&lt;/span&gt;i) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;37&lt;/span&gt;        thread_pool[i].join();
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;38&lt;/span&gt;    }
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;39&lt;/span&gt;    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050&#34;&gt;40&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make the end of our program simple, we will sleep the producer thread for 10 seconds to hopefully process all tasks, and stop the queue. In the last statement, we wait for all consumers to finish, and we exit the program.&lt;/p&gt;
&lt;p&gt;An example output of this program may be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;2&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;2&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 418ms.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;5&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 526ms.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;3&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;6&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;5&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 179ms.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;4&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;7&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;2&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 640ms.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;2&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;8&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 781ms.
Worker &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; is executing task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;9&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;6&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 277ms.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;0&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 912ms.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;7&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 337ms.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;8&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 527ms.
Task &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;9&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; finished in 861ms.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Make your pointers smart - C&#43;&#43; good practices</title>
      <link>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</link>
      <pubDate>Wed, 28 Feb 2018 21:05:41 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/smart-pointers-cpp-good-practices/</guid>
      <description>&lt;p&gt;Ever since the C++ language was first standardized, &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; were defined as the methods to create/delete objects dynamically. The &lt;code&gt;new&lt;/code&gt; operator allocates a memory block to construct an object and then calls the proper class&#39; constructor to initialize it. If successful, this operator will return a pointer to the location of the memory block. Otherwise, it will return &lt;code&gt;nullptr&lt;/code&gt; or it will throw an exception. The &lt;code&gt;delete&lt;/code&gt; operator executes the inverse operation, it deallocates object&amp;rsquo;s memory block. Before freeing the memory, &lt;code&gt;delete&lt;/code&gt; calls the object&amp;rsquo;s destructor. The destructor is used to free memory that the object must delete.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a small example that created objects dynamically with &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Contact&lt;/span&gt; {
 &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  Contact(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; email)
      &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; name{name}, email{email} {
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Constructed: [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;Contact() { std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Destructing: [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;; };

  &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string print() {
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;stringstream printStream;
    printStream &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;{Name:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;, Email:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; email &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; printStream.str();
  }

 &lt;span style=&#34;color:#719e07&#34;&gt;protected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string name;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string email;
};

&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
  Contact&lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; contact &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Contact(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jdoe@mail.com&amp;#34;&lt;/span&gt;);
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Contact: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contact&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;print() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;delete&lt;/span&gt; contact;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this program we will get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Constructed: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x162bc80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Contact: &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;Name:John Doe, Email:jdoe@mail.com&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
Destructing: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x162bc80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using regular pointers, like this example can give you problems. If you miss a &lt;code&gt;delete&lt;/code&gt; call on an object, the object&amp;rsquo;s memory blocks will not be reassigned to another process. This problem is called memory leak. Leaking memory can exhaust all of the system&amp;rsquo;s memory!&lt;/p&gt;
&lt;p&gt;Another problem related to &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; is pointer ownership. A regular pointer does not have the context to indicate who is its owner. By ownership, I mean whose object is in charge of deleting the pointer&amp;rsquo;s reference. If no one deletes the memory, we will get our memory leaked. If &lt;code&gt;delete&lt;/code&gt; gets called twice for the same object, we will get a segmentation fault. Further, if someone deletes an object, and another object tries to reference it, we will also hit a segmentation fault. With regular pointers, you must handle memory deallocation carefully. The larger your program grows, the harder will be to not make mistakes.&lt;/p&gt;
&lt;h1 id=&#34;introducing-smart-pointers&#34;&gt;Introducing smart pointers&lt;/h1&gt;
&lt;p&gt;Both ownership and memory deallocation are addressed by the new pointer types, introduced by the C++11 specification. Let&amp;rsquo;s will talk about &lt;code&gt;unique_ptr&lt;/code&gt; first. The &lt;code&gt;unique_ptr&lt;/code&gt; type wraps dynamic memory and disposes of it when the pointer goes out of scope. A &lt;code&gt;unique_ptr&lt;/code&gt; can only have one owner. Ownership can be passed between objects using the &lt;code&gt;std::move()&lt;/code&gt; function. This type implements both the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;-&amp;gt;&lt;/code&gt; operators to dereference memory, just like regular pointers. You can also get a raw pointer with the &lt;code&gt;get()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s change our main function so it uses &lt;code&gt;unique_ptr&lt;/code&gt; instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;memory&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Foo&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; contact &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
      std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Contact(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jdoe@mail.com&amp;#34;&lt;/span&gt;));
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Contact: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contact&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;print() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Bar&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Foo
Constructed: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1e68c80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Contact: &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;Name:John Doe, Email:jdoe@mail.com&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
Bar
Destructing: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1e68c80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I added two logs so you can verify that &lt;code&gt;contact&lt;/code&gt; deletes the object after &amp;ldquo;Bar&amp;rdquo; is logged. This happens because &lt;code&gt;contact&lt;/code&gt; is owned by &lt;code&gt;main&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt; goes out of scope after this log. Let&amp;rsquo;s surround &lt;code&gt;contact&lt;/code&gt; with an anonymous scope:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Foo&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  {
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; contact &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
        std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;new&lt;/span&gt; Contact(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jdoe@mail.com&amp;#34;&lt;/span&gt;));
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Contact: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contact&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;print() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  }
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Bar&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Foo
Constructed: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1e68c80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Contact: &lt;span style=&#34;color:#719e07&#34;&gt;{&lt;/span&gt;Name:John Doe, Email:jdoe@mail.com&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
Destructing: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1e68c80&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the object is deleted when the anonymous scope goes out of scope, right before the &amp;ldquo;Bar&amp;rdquo; log. Notice that in both examples, there is no &lt;code&gt;delete&lt;/code&gt; call. We can even get rid of the &lt;code&gt;new&lt;/code&gt; operator with C++14&amp;rsquo;s &lt;code&gt;make_unique&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; contact &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
      std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;make_unique&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jdoe@mail.com&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are cases where we need to share the ownership of an object. For this, C++11 introduced the &lt;code&gt;shared_ptr&lt;/code&gt; type. Several &lt;code&gt;shared_ptr&lt;/code&gt;s can refer to the same object, thus sharing ownership. Internally, these pointers keep a use counter. This counter indicates how many &lt;code&gt;shared_ptr&lt;/code&gt; are sharing ownership of an object. The last &lt;code&gt;shared_ptr&lt;/code&gt; owning an object deletes the object once it goes out of scope. This pointer type allows you to distribute ownership with the safety that memory will be properly freed. Let&amp;rsquo;s add to our example a &lt;code&gt;compare&lt;/code&gt; function that receives a copy &lt;code&gt;shared_ptr&lt;/code&gt; as a parameter. I added logs so we can check the pointers&#39; use counter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Contact&lt;/span&gt; {
 &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  Contact(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; name, &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt; email)
      &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; name{name}, email{email} {
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Constructed: [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  }
  &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;Contact() { std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Destructing: [&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;]&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;; };

  &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string print() {
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;stringstream printStream;
    printStream &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;{Name:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; name &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;, Email:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; email &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;;
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; printStream.str();
  }

  &lt;span style=&#34;color:#dc322f&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;compare&lt;/span&gt;(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; otherContact) {
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; (otherContact &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;nullptr&lt;/span&gt;) {
      std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Invalid parameter(s)&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;false&lt;/span&gt;;
    }
    std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; __FUNCTION__ &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; otherContact: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; otherContact
              &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; reference count: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; otherContact.use_count() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; name &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; otherContact&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;name &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; email &lt;span style=&#34;color:#719e07&#34;&gt;==&lt;/span&gt; otherContact&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;email;
  }

 &lt;span style=&#34;color:#719e07&#34;&gt;protected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string name;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string email;
};

&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Foo&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; contactJohn &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
      std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;make_shared&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jdoe@mail.com&amp;#34;&lt;/span&gt;);
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;shared_ptr&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt; contactJane &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;
      std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;make_shared&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&lt;/span&gt;Contact&lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Jane Smith&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;jsmith@mail.com&amp;#34;&lt;/span&gt;);
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;ContactJane pointer: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contactJane
            &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; reference count: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contactJane.use_count() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Are they equals?: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contactJohn&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;compare(contactJane) &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;ContactJane pointer: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contactJane
            &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; use count: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; contactJane.use_count() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Bar&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;Constructed: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1bf4c30&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Constructed: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1bf4cc0&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;                                             
ContactJane pointer: 0x1bf4cc0 use count: &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
compare otherContact: 0x1bf4cc0 use count: &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;
Are they equals?: &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;
ContactJane pointer: 0x1bf4cc0 use count: &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
Bar
Destructing: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1bf4cc0&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
Destructing: &lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;0x1bf4c30&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how calling &lt;code&gt;compare&lt;/code&gt; increases the use counter for &lt;code&gt;contactJane&lt;/code&gt; to two. Then, &lt;code&gt;compare&lt;/code&gt; returns and the use counter goes back to one. When &lt;code&gt;main&lt;/code&gt; finishes, the counter goes to zero, and memory is properly deleted. We do not have to worry about whether &lt;code&gt;compare&lt;/code&gt; will invalidate our memory or not. Another problem solved by the smart pointers!&lt;/p&gt;
&lt;p&gt;In conclusion, you should avoid the use of regular pointers and start using &lt;code&gt;unique_ptr&lt;/code&gt; and &lt;code&gt;shared_ptr&lt;/code&gt; pointers. They will save you a lot of headaches and you will get the most out of the modern C++ language.&lt;/p&gt;
&lt;h1 id=&#34;more-resources&#34;&gt;More resources&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://en.cppreference.com/w/cpp/memory&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;C++ Dynamic memory management reference documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Analyze the testing coverage of your C&#43;&#43; code</title>
      <link>https://eariassoto.github.io/post/coverage/</link>
      <pubDate>Sat, 18 Nov 2017 15:57:42 +0000</pubDate>
      
      <guid>https://eariassoto.github.io/post/coverage/</guid>
      <description>&lt;p&gt;Writing unit tests is a great way to ensure that your code is behaving correctly. But how can you tell how much of your code are you testing? The GCC compiler provides tools to analyze the testing coverage of your project. In this post, I will show you how to integrate these tools in a CMake project.&lt;/p&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GCC provides a testing coverage tool called &lt;code&gt;gcov&lt;/code&gt;. It creates log files that register how many times a code line has been executed. Using &lt;code&gt;gcov&lt;/code&gt; out of the box is as easy as compiling your code with some special flags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gcc -Wall -fprofile-arcs -ftest-coverage -O0 main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you run all the tests for that code, and call &lt;code&gt;gcov&lt;/code&gt;. This is an example output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gcov main.c 
 88.89% of &lt;span style=&#34;color:#2aa198&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;source&lt;/span&gt; lines executed in file main.c
Creating main.c.gcov
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The generated &lt;code&gt;.gcov&lt;/code&gt; files are copies of our source files, but with counters for every line that was executed. Though these &lt;code&gt;.gcov&lt;/code&gt; files give you the information you need, it would be great if we could generate more detailed reports. We can actually do this using &lt;code&gt;lcov&lt;/code&gt;, a tool that creates HTML reports based on &lt;code&gt;gcov&lt;/code&gt;&amp;rsquo;s output.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;To install the coverage tools, you ought to have &lt;code&gt;GCC&lt;/code&gt;, &lt;code&gt;CMake&lt;/code&gt;, and &lt;code&gt;lcov&lt;/code&gt; installed. To get my CMake template project, go over to &lt;a href=&#34;https://eariassoto.github.io/2017/10/test-your-c---code-with-the-google-test-framework/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;my previous post&lt;/a&gt;
, and follow the steps. The template already has a sample program with unit tests. However, you can follow this post, and install the coverage tools in your own CMake project.&lt;/p&gt;
&lt;h2 id=&#34;getting-the-test-coverage-module&#34;&gt;Getting the test coverage module&lt;/h2&gt;
&lt;p&gt;Configuring &lt;code&gt;gcov&lt;/code&gt; and &lt;code&gt;lcov&lt;/code&gt; for CMake can be quite complicated. To make things easier, we will download a CMake module from &lt;a href=&#34;https://github.com/bilke/cmake-modules/blob/master/CodeCoverage.cmake&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this repo&lt;/a&gt;
. Let&amp;rsquo;s create a folder called &lt;code&gt;CMakeModules&lt;/code&gt; in our project, and save the module file there.&lt;/p&gt;
&lt;h2 id=&#34;setting-out-our-cmake&#34;&gt;Setting out our CMake&lt;/h2&gt;
&lt;p&gt;First, we need to declare the name of our testing executable in &lt;code&gt;CMakeLists.txt&lt;/code&gt;. This is the executable that our coverage tool will run for the testing coverage analysis.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;-ut&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to set our CMake module folder to &lt;code&gt;CMakeModules&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Folder where the Coverage module is
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_MODULE_PATH&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/CMakeModules&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we need to configure the coverage target:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Code coverage
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_BUILD_TYPE&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;STREQUAL&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Coverage&amp;#34;&lt;/span&gt;)
    &lt;span style=&#34;color:#b58900&#34;&gt;set_target_properties&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#2aa198&#34;&gt;PROPERTIES&lt;/span&gt;
        &lt;span style=&#34;color:#2aa198&#34;&gt;COMPILE_FLAGS&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;-O0 -fprofile-arcs -ftest-coverage&amp;#34;&lt;/span&gt;
    )
    &lt;span style=&#34;color:#b58900&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CodeCoverage&lt;/span&gt;)
    &lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;COVERAGE_EXCLUDES&lt;/span&gt;
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;/usr/*&amp;#39;&lt;/span&gt;
		&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/tests/*&amp;#39;&lt;/span&gt;
		&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/googletest-src/googletest/include/gtest/*&amp;#39;&lt;/span&gt;
		&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/googletest-src/googletest/src/*&amp;#39;&lt;/span&gt;
		&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/googletest-src/googlemock/include/gmock/*&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;CMAKE_BINARY_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/googletest-src/googlemock/src/*&amp;#39;&lt;/span&gt;
    )
    &lt;span style=&#34;color:#b58900&#34;&gt;SETUP_TARGET_FOR_COVERAGE&lt;/span&gt;(
	&lt;span style=&#34;color:#2aa198&#34;&gt;NAME&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;coverage&lt;/span&gt;
	&lt;span style=&#34;color:#2aa198&#34;&gt;EXECUTABLE&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
	&lt;span style=&#34;color:#2aa198&#34;&gt;DEPENDENCIES&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
    )
&lt;span style=&#34;color:#b58900&#34;&gt;endif&lt;/span&gt;() &lt;span style=&#34;color:#586e75&#34;&gt;#CMAKE_BUILD_TYPE STREQUAL &amp;#34;Coverage&amp;#34;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First thing we need to do here is add the compiler flags to enable &lt;code&gt;gcov&lt;/code&gt;. We also need to add the flag to disable optimizations. The &lt;code&gt;include&lt;/code&gt; command will add the CMake module we downloaded to our project. Then, we need to declare all the folders we want to exclude from the analysis. Finally, the &lt;code&gt;SETUP_TARGET_FOR_COVERAGE&lt;/code&gt; command makes all the magic happen. We will have a &lt;code&gt;coverage&lt;/code&gt; target that will run the executable we declared, and create the coverage report in our &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt;
&lt;h2 id=&#34;running-the-test-coverage-analysis&#34;&gt;Running the test coverage analysis&lt;/h2&gt;
&lt;p&gt;To run the analysis, we need to build the project using the &lt;code&gt;Coverage&lt;/code&gt; build type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mkdir build
&lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; build
cmake -DCMAKE_BUILD_TYPE&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;Coverage ..
make
make coverage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If these commands executed succesfully, open &lt;code&gt;build/coverage/index.html&lt;/code&gt; file in a web browser. It will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://eariassoto.github.io/static/img/lcov1.PNG&#34;
        alt=&#34;Initial analysis&#34;/&gt;&lt;/p&gt;
&lt;p&gt;Now you have all your coverage information in one report! You can navigate through your code and check which parts need testing. Let&amp;rsquo;s modify our sample program a little bit, and add some validations to our &lt;code&gt;Person&lt;/code&gt; constructor. We will change it to throw an exception if the name comes empty:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;stdexcept&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Person.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
Person&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;Person(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string name) {
	&lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt;(name.empty()){
	    &lt;span style=&#34;color:#719e07&#34;&gt;throw&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;invalid_argument(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Name cannot be empty.&amp;#34;&lt;/span&gt;);
	}
	&lt;span style=&#34;color:#719e07&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;-&amp;gt;&lt;/span&gt;name &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; name;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s run the analysis again with &lt;code&gt;make coverage&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://eariassoto.github.io/static/img/lcov2.PNG&#34;
        alt=&#34;Initial analysis&#34;/&gt;&lt;/p&gt;
&lt;p&gt;We can see that line 6 is not being executed by any unit test. Let&amp;rsquo;s add two unit test to be sure we are covering both branches of the constructor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;TEST(GreeterTests, PersonValidCtorTest) {
	ASSERT_NO_THROW({
		Person p{&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Alexa&amp;#34;&lt;/span&gt;};
	});
}

TEST(GreeterTests, PersonInvalidCtorTest) {
	ASSERT_THROW({
		Person p{&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;};
	}, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;invalid_argument);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A final run of the analysis will tell us that our code is 100% covered again:&lt;/p&gt;
&lt;p&gt;&lt;img  src=&#34;https://eariassoto.github.io/static/img/lcov3.PNG&#34;
        alt=&#34;Initial analysis&#34;/&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s pretty much it, now you have a tool to measure the coverage of your tests. You can use this coverage tool to analyze the coverage of other tests, such as component and feature tests. Further, you can integrate this analysis in CI services, like &lt;a href=&#34;https://travis-ci.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Travis CI&lt;/a&gt;
 and &lt;a href=&#34;https://jenkins.io/index.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Jenkins&lt;/a&gt;
.&lt;/p&gt;
&lt;h2 id=&#34;useful-links&#34;&gt;Useful links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gcc-5.3.0/gcc/Gcov.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;gcov reference page&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ltp.sourceforge.net/coverage/lcov.php&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;lcov official website&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Test your C&#43;&#43; code with the Google Test framework</title>
      <link>https://eariassoto.github.io/post/unit-tests/</link>
      <pubDate>Tue, 31 Oct 2017 01:53:18 +0000</pubDate>
      
      <guid>https://eariassoto.github.io/post/unit-tests/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://eariassoto.github.io/2017/04/building-a-basic-c/c---project-template/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;In a previous post&lt;/a&gt;
, I showed you a C/C++ template that you can use for a project. I felt that it needed a basic testing framework. Therefore, we are going to learn how to install and use the Google Test framework to write tests. When we have finished this tutorial, we will have an executable that will run tests for our code.&lt;/p&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template/tree/template-with-ut&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I will assume that you are familiarized with unit testing methods. In case you do not know about the Google Test framework, &lt;a href=&#34;https://github.com/google/googletest/blob/master/googletest/docs/Primer.md&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
 is a basic introduction to this library. This post will be more of a tutorial rather than a technical post. I plan to write about test driven development (TDD) in the future.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;We need to have installed a C/C++ compiler and CMake on our machine. Next, we need to download the C/C++ template project. &lt;a href=&#34;https://github.com/eariassoto/cpp-project-template/tree/basic-template&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Here&lt;/a&gt;
 is the link to the repo where you can get it. As I mentioned before, &lt;a href=&#34;https://eariassoto.github.io/2017/04/building-a-basic-c/c---project-template/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;in this post&lt;/a&gt;
 I got further into details about this template. Feel free to read it, and then come back here to continue. If you have your own CMake project, you can follow the steps and install Google Test on your own project.&lt;/p&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder structure&lt;/h2&gt;
&lt;p&gt;Our project should look like this now:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cpp-project-template
├── CMakeLists.txt
├── include
│   ├── Greeter.h
│   ├── IPerson.h
│   └── Person.h
├── src
│   ├── greeter.cpp
│   └── main.cpp
└── tests
    ├── CMakeLists.txt
    ├── CMakeLists.txt.in
    ├── include
    │   └── mocks
    │       └── MockPerson.h
    └── src
        ├── greeterTests.cpp
        └── main.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;tests/&lt;/code&gt; folder will contain our unit testing project. It is also a CMake project, so it has its own &lt;code&gt;CMakeLists.txt&lt;/code&gt; file. The &lt;code&gt;tests/CMakeLists.txt.in&lt;/code&gt; file will help us include the Google Test library.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-cmake&#34;&gt;Setting up CMake&lt;/h2&gt;
&lt;p&gt;To include our unit testing project, we only need to add this line at the end of our &lt;code&gt;CMakeLists.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Unit tests
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;add_subdirectory&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;tests&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, let&amp;rsquo;s go over the &lt;code&gt;tests/CMakeLists.txt&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2.8&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;-ut&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Download and unpack googletest at configure time
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;configure_file&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMakeLists.txt.in&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;googletest-download/CMakeLists.txt&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;execute_process&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;COMMAND&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_COMMAND}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;-G&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_GENERATOR}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;.&lt;/span&gt;
      &lt;span style=&#34;color:#2aa198&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/tests/googletest-download&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;color:#b58900&#34;&gt;execute_process&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;COMMAND&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_COMMAND}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;--build&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;.&lt;/span&gt;
      &lt;span style=&#34;color:#2aa198&#34;&gt;WORKING_DIRECTORY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/tests/googletest-download&amp;#34;&lt;/span&gt; )
&lt;span style=&#34;color:#586e75&#34;&gt;# Add googletest directly to our build. This adds
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# the following targets: gtest, gtest_main, gmock
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# and gmock_main
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;add_subdirectory&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/googletest-src&amp;#34;&lt;/span&gt;
                 &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/googletest-build&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Test folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;TESTS_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;tests&lt;/span&gt;)
&lt;span style=&#34;color:#586e75&#34;&gt;# Header files folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;INCL_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;include&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;MOCKS_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;mocks&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;include_directories&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;TESTS_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;INCL_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;include_directories&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;TESTS_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;INCL_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;MOCKS_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;SRC_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;src&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;PROY_UT_SRC&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/main.cpp&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/greeterTests.cpp&lt;/span&gt;
)

&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;MAIN_SRC_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;../src&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;include_directories&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;INCL_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)
&lt;span style=&#34;color:#586e75&#34;&gt;# Include all project source files here
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;MAIN_SOURCE&lt;/span&gt; 
    &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;MAIN_SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/greeter.cpp&lt;/span&gt;
)

&lt;span style=&#34;color:#b58900&#34;&gt;add_executable&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROY_UT_SRC&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;MAIN_SOURCE&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;set_target_properties&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
                      &lt;span style=&#34;color:#2aa198&#34;&gt;PROPERTIES&lt;/span&gt;
                      &lt;span style=&#34;color:#2aa198&#34;&gt;COMPILE_FLAGS&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;-std=c++11 -Wall -Werror&amp;#34;&lt;/span&gt;
)
&lt;span style=&#34;color:#586e75&#34;&gt;# Link libraries
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;target_link_libraries&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_TEST_NAME&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;
                      &lt;span style=&#34;color:#2aa198&#34;&gt;gtest&lt;/span&gt;
                      &lt;span style=&#34;color:#2aa198&#34;&gt;gmock_main&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are several ways I could have included the Google Test library in the project. The &lt;code&gt;find_package&lt;/code&gt; command would have done it just fine, but the library needs to be installed in the computer. Another option would have been to manually copy the library in my project and compile it there. Luckily, I found a cleaner and more portable way to install the library. We will tell CMake to automatically clone and compile the library when it builds the project.&lt;/p&gt;
&lt;p&gt;The line 5 of &lt;code&gt;tests/CMakeLists.txt&lt;/code&gt; is copying &lt;code&gt;tests/CMakeLists.txt.in&lt;/code&gt; to a subdirectory under &lt;code&gt;build/&lt;/code&gt;. This file has the information to download Google Tests as an external project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2.8.2&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;project&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;googletest-download&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;NONE&lt;/span&gt;)
 
&lt;span style=&#34;color:#b58900&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;ExternalProject&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;ExternalProject_Add&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;googletest&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;GIT_REPOSITORY&lt;/span&gt;    &lt;span style=&#34;color:#2aa198&#34;&gt;https://github.com/google/googletest.git&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;GIT_TAG&lt;/span&gt;           &lt;span style=&#34;color:#2aa198&#34;&gt;master&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;SOURCE_DIR&lt;/span&gt;        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/googletest-src&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;BINARY_DIR&lt;/span&gt;        &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_BINARY_DIR}/googletest-build&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;CONFIGURE_COMMAND&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;BUILD_COMMAND&lt;/span&gt;     &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;INSTALL_COMMAND&lt;/span&gt;   &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#2aa198&#34;&gt;TEST_COMMAND&lt;/span&gt;      &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lines 6-9 of &lt;code&gt;tests/CMakeLists.txt&lt;/code&gt; execute the commands that download and build the library. Lines 13-14 add the library as a submodule. Finally, the linking of the library is made in lines 44-47. Notice that this library will only be available to our unit testing project.&lt;/p&gt;
&lt;p&gt;The rest of the &lt;code&gt;tests/CMakeLists.txt&lt;/code&gt; file should be familiar to you. Similarly to our main project, your can keep your headers in &lt;code&gt;tests/include&lt;/code&gt; and your source code in &lt;code&gt;tests/src&lt;/code&gt;. It is important that you also include the headers and source files of your main project. Otherwise, your tests will fail to compile.&lt;/p&gt;
&lt;p&gt;We need a main function for out unit testing project&amp;rsquo;s executable file. This function will search for tests and run them all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;gtest/gtest.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;**&lt;/span&gt;argv) {
  testing&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;InitGoogleTest(&lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;argc, argv);
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; RUN_ALL_TESTS();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And that is pretty much it. We do not need additional commands to compile our unit testing project. After we build the main project, the executable for the unit tests will be under the &lt;code&gt;bin/&lt;/code&gt; folder. The executable is named like the main project, but it will have the &lt;code&gt;-ut&lt;/code&gt; suffix.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;
&lt;p&gt;To give you a small example of unit testing with Google Test, let&amp;rsquo;s make a simple program to greet people. We want to encapsulate the person&amp;rsquo;s data, and then pass it to our greeter.&lt;/p&gt;
&lt;p&gt;As you can imagine, we will implement classes &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Greeter&lt;/code&gt;. Additionally, we will abstract &lt;code&gt;Person&lt;/code&gt;&amp;rsquo;s implementation in the interface &lt;code&gt;IPerson&lt;/code&gt;. With this, &lt;code&gt;Greeter&lt;/code&gt; can take any &lt;code&gt;IPerson&lt;/code&gt; implementation. Using interfaces to handle dependencies between classes makes our classes independent of each other. Furthermore, it makes our code more easy to maintain and test.&lt;/p&gt;
&lt;p&gt;Without more, let&amp;rsquo;s see the code for out program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#ifndef __IPERSON__H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#define __IPERSON__H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;IPerson&lt;/span&gt; {
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#719e07&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;IPerson(){};
  &lt;span style=&#34;color:#719e07&#34;&gt;virtual&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string getName() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
};
&lt;span style=&#34;color:#719e07&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;/** __IPERSON__H__ */&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#ifndef __PERSON__H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#define __PERSON__H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;IPerson.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Person&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt; IPerson {
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  Person(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string name) &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; name(name){};
  &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;Person(){};

  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string getName() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; name; };

&lt;span style=&#34;color:#719e07&#34;&gt;protected&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string name;
};
&lt;span style=&#34;color:#719e07&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;/** __PERSON__H__ */&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#ifndef __GREETER__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#define __GREETER__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;IPerson.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Greeter&lt;/span&gt; {
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string greet();
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string greetTo(IPerson &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;person);
};
&lt;span style=&#34;color:#719e07&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;/* __GREETER__ */&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Greeter.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string Greeter&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;greet() { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;; }

std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string Greeter&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;greetTo(IPerson &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;person) {
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hi &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; person.getName() &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;!&amp;#34;&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Greeter.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Person.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;argv[]) {
  Person p{&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Emmanuel&amp;#34;&lt;/span&gt;};
  Greeter g;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; g.greet() &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; g.greetTo(p) &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s compile and run both our program and our unit testing executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~/cpp-project-template $ mkdir build
~/cpp-project-template $ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; build
~/cpp-project-template/build $ cmake ..
~/cpp-project-template/build $ make
~/cpp-project-template/build $ ./../bin/cpp-project-template
Hello world!
Hi Emmanuel!
~/cpp-project-template/build $ ./../bin/cpp-project-template-ut
&lt;span style=&#34;color:#719e07&#34;&gt;[==========]&lt;/span&gt; Running &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; tests from &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; cases.
&lt;span style=&#34;color:#719e07&#34;&gt;[==========]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; tests from &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; cases ran. &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; ms total&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;  PASSED  &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; tests.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything seems fine, our program is showing the correct output, and the unit testing executable ran zero tests. We will start writing the tests for the &lt;code&gt;Person&lt;/code&gt; class. We only need one test for the &lt;code&gt;std::string getName()&lt;/code&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Person.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;gtest/gtest.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
TEST(GreeterTests, PersonGetNameTest) {
  Person p{&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Woz&amp;#34;&lt;/span&gt;};
  ASSERT_STREQ(p.getName().c_str(), &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Woz&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For the &lt;code&gt;Greeter&lt;/code&gt; class, we need to deal with the &lt;code&gt;IPerson&lt;/code&gt;. interface. Passing a &lt;code&gt;Person&lt;/code&gt; instance might bring us problems. If &lt;code&gt;Person&lt;/code&gt; has bugs, our tests will probably be affected. To isolate the testing of &lt;code&gt;Greeter&lt;/code&gt; from whatever &lt;code&gt;IPerson&lt;/code&gt; implementation we have, we need to implement mock objects. A mock is a simulated object that mimics the behavior of a real object.&lt;/p&gt;
&lt;p&gt;To create mocks in our unit testing project, Google Test provides the &lt;a href=&#34;https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Google Mock&lt;/a&gt;
 library. We will define a &lt;code&gt;MockIPerson&lt;/code&gt; class that will simulate the behavior for interface &lt;code&gt;IPerson&lt;/code&gt;. We will make this mock behave correctly in our &lt;code&gt;Greeter&lt;/code&gt; unit tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#ifndef __MOCKIPERSON__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#define __MOCKIPERSON__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;IPerson.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;gmock/gmock.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;MockIPerson&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt; IPerson {
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  MockIPerson(){}
  &lt;span style=&#34;color:#719e07&#34;&gt;~&lt;/span&gt;MockIPerson(){}
  MOCK_CONST_METHOD0(getName, std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;string());
};
&lt;span style=&#34;color:#719e07&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;/** __MOCKIPERSON__ */&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Greeter.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;MockPerson.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;gtest/gtest.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;testing&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;Return;

TEST(GreeterTests, GreetTest) {
  Greeter g;
  ASSERT_STREQ(g.greet().c_str(), &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;);
}
 
TEST(GreeterTests, GreetToTest) {
  MockPerson mockPerson;
  EXPECT_CALL(mockPerson, getName()).WillOnce(Return(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Greg&amp;#34;&lt;/span&gt;));
  Greeter g;
  ASSERT_STREQ(g.greetTo(mockPerson).c_str(), &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Hi Greg!&amp;#34;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice that, in line 13, we catch the &lt;code&gt;getName()&lt;/code&gt; call from our mock. &lt;code&gt;greetTo&lt;/code&gt; will call this function, and the mock will return the string we provided. Finally, let&amp;rsquo;s recompile and run our tests.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;~/cpp-project-template/build $ cmake ..
~/cpp-project-template/build $ make
~/cpp-project-template/build $ ./../bin/cpp-project-template-ut
&lt;span style=&#34;color:#719e07&#34;&gt;[[==========]&lt;/span&gt; Running &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; tests from &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt;.
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;----------&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; Global &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; environment set-up.
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;----------&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; tests from GreeterTests
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt; RUN      &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.GreetTest
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;       OK &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.GreetTest &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; ms&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt; RUN      &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.GreetToTest
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;       OK &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.GreetToTest &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; ms&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt; RUN      &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.PersonGetNameTest
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;       OK &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; GreeterTests.PersonGetNameTest &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; ms&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;----------&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; tests from GreeterTests &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; ms total&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;----------&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; Global &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; environment tear-down
&lt;span style=&#34;color:#719e07&#34;&gt;[==========]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; tests from &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;case&lt;/span&gt; ran. &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; ms total&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;  PASSED  &lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; tests.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;where-to-go-next&#34;&gt;Where to go next&lt;/h2&gt;
&lt;p&gt;The documentation for Google Test is quite extensive. Here is a list of resources you can check to learn how to use this framework:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest/blob/master/googletest/docs/Documentation.md&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Google Test documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/googletest/tree/master/googlemock/docs&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Google Mock documentation&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template/tree/template-with-ut&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First Steps With Go</title>
      <link>https://eariassoto.github.io/post/first-steps-with-go/</link>
      <pubDate>Sun, 10 Sep 2017 18:03:18 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/first-steps-with-go/</guid>
      <description>&lt;p&gt;Go is a simple and powerful programming language. Its syntax is familiar to C/C++ but it definately has improvements in comparison. It has a bunch of great features such as static types, memory safety, garbage collection, and it is targeted to concurrent programming. I discovered it very recently, so I want to start simple and learn the basics of this language. In this post, we will write our first Go program and library. Also, we will learn how to unit tests our Go programs.&lt;/p&gt;
&lt;h1 id=&#34;installing-go&#34;&gt;Installing Go&lt;/h1&gt;
&lt;p&gt;I will show you how to install Go in Linux. For Windows and Mac, the process should be very similar. First, you need to visit &lt;a href=&#34;https://golang.org/dl/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;this page&lt;/a&gt;
 and copy the link for the Linux version. In my case, I need the &lt;code&gt;go1.9.linux-amd64&lt;/code&gt; version. We need to extract the file somewhere in our computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; /opt
curl https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz | tar zxf -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we need to create our Go home directory. In that folder, we will keep our source files, third-party libraries, and install the executables for our programs. Go ahead and create this folder in your home directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go/
├── bin
└── src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we need to set two environment variables: &lt;code&gt;GOROOT&lt;/code&gt; and &lt;code&gt;GOPATH&lt;/code&gt;. Go binaries will assume they have been installed in &lt;code&gt;/usr/local/go&lt;/code&gt; (or &lt;code&gt;c:\Go&lt;/code&gt; in Windows). In case you installed them somewhere else, set &lt;code&gt;GOROOT&lt;/code&gt; to your Go binaries folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Point to the local installation of golang.&lt;/span&gt;
&lt;span style=&#34;color:#b58900&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;GOROOT&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;/opt/go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;GOPATH&lt;/code&gt; variable, as discussed &lt;a href=&#34;https://golang.org/cmd/go/#hdr-GOPATH_environment_variable&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[&amp;hellip;] lists places to look for Go code. On Unix, the value is a colon-separated string. On Windows, the value is a semicolon-separated string.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Point to the location beneath which source and binaries are installed.&lt;/span&gt;
&lt;span style=&#34;color:#b58900&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;GOPATH&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, let&amp;rsquo;s add Go binaries and our /bin folders to the $PATH variable. This way, we can use the Go tools and our programs from the console.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Ensure that the binary-release is on your PATH.&lt;/span&gt;
&lt;span style=&#34;color:#b58900&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#2aa198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;GOROOT&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;}&lt;/span&gt;/bin

&lt;span style=&#34;color:#586e75&#34;&gt;# Ensure that compiled binaries are also on your PATH.&lt;/span&gt;
&lt;span style=&#34;color:#b58900&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Save the &lt;code&gt;~/.bashrc&lt;/code&gt; file, and check that Go is correctly installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;source&lt;/span&gt; .bashrc
$ go version
go version go1.9 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;writing-our-first-hello-world-program&#34;&gt;Writing our first &amp;ldquo;Hello World!&amp;rdquo; program&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s create our first Go program. For this, we need to create a &lt;code&gt;hello_world&lt;/code&gt; folder inside &lt;code&gt;$HOME/go/src&lt;/code&gt;. Go files end with the &lt;code&gt;.go&lt;/code&gt; extension. Let&amp;rsquo;s add a &lt;code&gt;main.go&lt;/code&gt; file with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first statement in any Go source file will be the package name. Packages are a way to separate files in your projects. For executable projects, there should always be a &lt;code&gt;main&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;import&lt;/code&gt; keyword allow us to import packages in our source file. The &lt;code&gt;fmt&lt;/code&gt; package is part of the Go&amp;rsquo;s standard library. We will use &amp;ldquo;fmt&amp;rdquo; to print to &lt;code&gt;stdout&lt;/code&gt;. Later in this post, we will see how to import our own libraries.&lt;/p&gt;
&lt;p&gt;Finally, we need to define the &lt;code&gt;main&lt;/code&gt; function. This will be the starting point of our program and it is always required in executable projects.&lt;/p&gt;
&lt;h1 id=&#34;building-and-installing-our-program&#34;&gt;Building and installing our program&lt;/h1&gt;
&lt;p&gt;To simple compile and run our program, we can use the &lt;code&gt;run&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go/src/hello_world
$ go run main.go
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will not create an executable file. However, the &lt;code&gt;build&lt;/code&gt; command will do it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go/src/hello_world
$ go build .
$ ./hello_world
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Additionally, the &lt;code&gt;install&lt;/code&gt; command will build and copy the executable in the &lt;code&gt;go/bin&lt;/code&gt; folder. We added this folder to our &lt;code&gt;$PATH&lt;/code&gt;, so the executable will get installed in our computer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go/src/hello_world
$ go install .
$ ./hello_world
Hello world!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So far, this is how your Go home folder should look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;go
├── bin
│   └── hello_world
└── src
    └── hello_world
        ├── hello_world
        └── main.go
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;writing-our-own-library&#34;&gt;Writing our own library&lt;/h1&gt;
&lt;p&gt;A library in Go is a project that does not define a &lt;code&gt;main&lt;/code&gt; package and will not bild an executable file. For our first library, let&amp;rsquo;s create a &lt;code&gt;strcaseconv&lt;/code&gt; folder in &lt;code&gt;$HOME/go/src&lt;/code&gt;. We will use this library in our &lt;code&gt;hello_world&lt;/code&gt; folder. Inside &lt;code&gt;strcaseconv&lt;/code&gt;, we will add a &lt;code&gt;strcase.go&lt;/code&gt; file with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;package&lt;/span&gt; strcaseconv

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ToMixCase&lt;/span&gt;(s &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt; {
        b &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#b58900&#34;&gt;byte&lt;/span&gt;(s)
        &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#b58900&#34;&gt;len&lt;/span&gt;(b); i &lt;span style=&#34;color:#719e07&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; {
                &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; b[i] &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b[i] &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; {
                        b[i] &lt;span style=&#34;color:#719e07&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;32&lt;/span&gt;
                } &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; b[i] &lt;span style=&#34;color:#719e07&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b[i] &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt; {
                        b[i] &lt;span style=&#34;color:#719e07&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;32&lt;/span&gt;
                }
        }
        &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;string&lt;/span&gt;(b)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compile the library to check for any errors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;$HOME&lt;/span&gt;/go/src/strcaseconv
$ go build .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, go back to your &lt;code&gt;hello_world&lt;/code&gt; projectd and modify &lt;code&gt;main.go&lt;/code&gt; to use our new library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; (
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;strcaseconv&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;() {
    fmt.&lt;span style=&#34;color:#268bd2&#34;&gt;Println&lt;/span&gt;(strcaseconv.&lt;span style=&#34;color:#268bd2&#34;&gt;ToMixCase&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;unit-testing-our-projects&#34;&gt;Unit testing our projects&lt;/h1&gt;
&lt;p&gt;In Go, the unit test framework comes for free. This framework consists in the &lt;code&gt;test&lt;/code&gt; command and the &lt;code&gt;testing&lt;/code&gt; package. All test should be written in files ending with &lt;code&gt;_test.go&lt;/code&gt;. The unit test functions should be named following the &lt;code&gt;TestXXX&lt;/code&gt; convention. The functions&#39; signature ought to be &lt;code&gt;func (t *testing.T)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;test&lt;/code&gt; command will run all unit test functions. Those function who calls &lt;code&gt;t.Error&lt;/code&gt; or &lt;code&gt;t.Fail&lt;/code&gt; are considered as failed tests. Let&amp;rsquo;s unit test our &lt;code&gt;strcaseconv&lt;/code&gt; library in &lt;code&gt;strcase_test.go&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;package&lt;/span&gt; strcaseconv

&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;TestTryUpper&lt;/span&gt;(t &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;testing.T) {
    cases &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {
        in, out &lt;span style=&#34;color:#dc322f&#34;&gt;byte&lt;/span&gt;
    }{
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;!&amp;#39;&lt;/span&gt;},
    }

    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; _, c &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; cases {
        got &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;tryUpper&lt;/span&gt;(c.in)
        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; got &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; c.out {
            t.&lt;span style=&#34;color:#268bd2&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;tryUpper(%q) == %q, want %q&amp;#34;&lt;/span&gt;, c.in, got, c.out)
        }
    }
}

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;TestTryLower&lt;/span&gt;(t &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;testing.T) {
    cases &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {
        in, out &lt;span style=&#34;color:#dc322f&#34;&gt;byte&lt;/span&gt;
    }{
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt;},
    }

    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; _, c &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; cases {
        got &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;tryLower&lt;/span&gt;(c.in)
        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; got &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; c.out {
            t.&lt;span style=&#34;color:#268bd2&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;tryLower(%q) == %q, want %q&amp;#34;&lt;/span&gt;, c.in, got, c.out)
        }
    }
}

&lt;span style=&#34;color:#268bd2&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;TestToMixCase&lt;/span&gt;(t &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;testing.T) {
    cases &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#268bd2&#34;&gt;struct&lt;/span&gt; {
        in, out &lt;span style=&#34;color:#dc322f&#34;&gt;string&lt;/span&gt;
    }{
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;HeLlO, wOrLd&amp;#34;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It is a nice day&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;It iS A NiCe dAy&amp;#34;&lt;/span&gt;},
        {&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;},
    }

    &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; _, c &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;range&lt;/span&gt; cases {
        got &lt;span style=&#34;color:#719e07&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;ToMixCase&lt;/span&gt;(c.in)
        &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; got &lt;span style=&#34;color:#719e07&#34;&gt;!=&lt;/span&gt; c.out {
            t.&lt;span style=&#34;color:#268bd2&#34;&gt;Errorf&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;ToMixCase(%q) == %q, want %q&amp;#34;&lt;/span&gt;, c.in, got, c.out)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run them, use the &lt;code&gt;test&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; go/src/strcaseconv
$ go &lt;span style=&#34;color:#b58900&#34;&gt;test&lt;/span&gt;
PASS
ok      strcaseconv    0.001s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can find more information about the &lt;code&gt;testing&lt;/code&gt; package &lt;a href=&#34;https://godoc.org/testing&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;here&lt;/a&gt;
&lt;/p&gt;
&lt;h1 id=&#34;more-useful-commands&#34;&gt;More useful commands&lt;/h1&gt;
&lt;p&gt;To install someone else&amp;rsquo;s library or program, Go offers the &lt;code&gt;get&lt;/code&gt; command. To try it, let&amp;rsquo;s download this hello world program I made a little while ago:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ go get github.com/eariassoto/hello_go
$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; go/src/github.com/eariassoto/hello_go/
$ go run main.go 
What is your name?: Emmanuel
Hello Emmanuel!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Go will install new libraries in the first folder pointed by &lt;code&gt;GOPATH&lt;/code&gt;. In our setup, it will be in the &lt;code&gt;$HOME/go/src&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;Another useful feature is the &lt;code&gt;fmt&lt;/code&gt; command. This command will take as parameters Go source files and it will format them using Go conventions.&lt;/p&gt;
&lt;p&gt;If you are a Vim user, there is a nice &lt;a href=&#34;https://github.com/fatih/vim-go&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;plugin&lt;/a&gt;
 for Go development.&lt;/p&gt;
&lt;h1 id=&#34;where-to-go-next&#34;&gt;Where to go next?&lt;/h1&gt;
&lt;p&gt;There are a lot of resources and documentation about Go. If you want to learn more about Go visit these websites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.golang.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Go Playground&lt;/a&gt;
 Online Go editor and compiler&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tour.golang.org/welcome/1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;A Tour of Go&lt;/a&gt;
 Official Go tutorial&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gobyexample.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Go by Example&lt;/a&gt;
 Excellent hand-on introduction on Go&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/doc/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Go Documentation&lt;/a&gt;
 Official Go documentation&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Source-to-source compilation with Lex-Yacc</title>
      <link>https://eariassoto.github.io/post/source-to-source-compilation-with-lex-yacc/</link>
      <pubDate>Sat, 15 Jul 2017 10:43:23 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/source-to-source-compilation-with-lex-yacc/</guid>
      <description>&lt;p&gt;In this post, I will describe a source-to-source compiler that transforms a Brainfuck program into its equivalent 64 bits assembly code. The assembly program can be built into a executable, thus allowing you to run Brainfuck programs natively.&lt;/p&gt;
&lt;p&gt;A source-to-source compiler is a compiler that takes a program written in a certain language and outputs the equivalent program in another language. This process is useful to compile a program to an intermediate language, or to provide backward compatibility for a legacy language. The Babel compiler, for instance, can parse Javascript ES6 to Javascript ES5 standard. The ES6 standard comes with a lot of improvements and new features, but it is currently not supported by most web browsers. Or maybe, you can come up with a new language and translate it to another one. Take for example this list of &lt;a href=&#34;https://github.com/jashkenas/coffeescript/wiki/list-of-languages-that-compile-to-js&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;languages that compile to Javascript&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/brasm/&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;
&lt;p&gt;I used Python to develop the compiler. In order to run the compiler you need to have Python installed on your computer. Also, you need the Python Lex-Yacc (PLY) module installed in your python environment. You can download the latest PLY version (I used the 3.10 version) from the &lt;a href=&#34;http://www.dabeaz.com/ply/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;PLY homepage&lt;/a&gt;
. To install PLY uncompress the file you downloaded, open a terminal within the uncompressed folder and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In case you want to compile the assembly code, you need the &lt;a href=&#34;http://www.x86asm.us/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;x86asm assembler&lt;/a&gt;
, and the Linux dynamic linker (ld command). I decided to go with x86asm because it supports the Intel assembly syntax which is more readable than the AT&amp;amp;T syntax.&lt;/p&gt;
&lt;h1 id=&#34;the-source-language-brainfuck&#34;&gt;The source language: Brainfuck&lt;/h1&gt;
&lt;p&gt;Brainfuck is a  &lt;a href=&#34;https://en.wikipedia.org/wiki/Turing_completeness&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Turing complete&lt;/a&gt;
 programming language. I chose this language as input language because it has a small set of instructions. Its only memory structure is a buffer of at least 30,000 bytes initialized to zero. In C, that buffer can be declared as &lt;code&gt;char buffer[30000] = {0};&lt;/code&gt;. The only variable is a data pointer that starts at the beginning of the buffer. To continue the C analogy, the data pointer might be declared as &lt;code&gt;char *ptr = buffer;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A Brainfuck program is structured as a series of instructions. The most basic instructions manipulate memory buffer using the data pointer. There are two streams of bytes for input and output. Also, there are two instructions to implement loops. Table below describes all the instructions:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;C equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Increment data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;++ptr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Decrement data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&amp;ndash;ptr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Increment by one byte at the data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;++*ptr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Decrement by one byte at the data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&amp;ndash;*ptr;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Print byte at the data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;putchar(*ptr);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Read char from input, store in the byte at the data pointer&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;*ptr=getchar();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;If the byte at the data pointer is zero, jump to matching &lt;code&gt;]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;while (*ptr) {&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;if the byte at the data pointer is nonzero, jump to matching &lt;code&gt;[&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Brainfuck falls into the category of &lt;a href=&#34;https://en.wikipedia.org/wiki/Esoteric_programming_language&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;esoteric programming languages&lt;/a&gt;
. So, Brainfuck programs are really hard to understand. For example, this is an implementation of the classic &amp;ldquo;Hello World&amp;rdquo; program written in Brainfuck:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-brainfuck&#34; data-lang=&#34;brainfuck&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;++++++++++&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++++++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;++++++++++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++++++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;..&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++++++++++++++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+++&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;------&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;--------&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;hello-assembly&#34;&gt;Hello Assembly&lt;/h1&gt;
&lt;p&gt;For this post, I will assume you are familiarized with x86-64 assembly code. To compare the previous example, I wrote a Hello World in x86-64 assembly code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;global&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;_start&lt;/span&gt;

&lt;span style=&#34;color:#268bd2&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;.text&lt;/span&gt;
_start:
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rsi&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;message&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdx&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;13&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;syscall&lt;/span&gt;

&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;60&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;xor&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;rdi&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;syscall&lt;/span&gt;

message:
&lt;span style=&#34;color:#268bd2&#34;&gt;db&lt;/span&gt; &amp;#34;&lt;span style=&#34;color:#cb4b16&#34;&gt;Hello&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;World&lt;/span&gt;&amp;#34;, &lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;global _start&lt;/code&gt; directive defines the entry point for our program. The &lt;code&gt;.text&lt;/code&gt; section contains the program instructions and all constants we defined. This program calls two special functions, called system calls. System calls are functions executed by the kernel because they required higher privileges. These functions take parameters using registers, and they are invoked using the &lt;code&gt;syscall&lt;/code&gt; instruction. This “hello world” program calls the  &lt;code&gt;sys_write&lt;/code&gt; system call to print the string &lt;code&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt;, and the &lt;code&gt;sys_exit&lt;/code&gt; system call to exit the program. To check all the available system calls and their parameters, &lt;a href=&#34;http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;check this list&lt;/a&gt;
.&lt;/p&gt;
&lt;h1 id=&#34;translating-brainfuck-instructions-set-to-x64-assembly&#34;&gt;Translating Brainfuck instructions set to x64 assembly&lt;/h1&gt;
&lt;p&gt;The first thing I needed to define was the buffer memory and the data pointer. I declared the buffer as a 30000 bytes zero-initialized array in the &lt;code&gt;.bss&lt;/code&gt; section. In this section, the program declared static variables. These variables will be allocated and initialized by the program loader. All variables in the &lt;code&gt;.bss&lt;/code&gt; section are zero-initialized. For the data pointer, I will use register &lt;code&gt;r9&lt;/code&gt;. When the program starts, the buffer address will be stored in this register.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;section&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;.bss&lt;/span&gt;
buffer: &lt;span style=&#34;color:#268bd2&#34;&gt;resb&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;30000&lt;/span&gt;

_start:
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;buffer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I will break Brainfuck instructions into four subsections: pointer instructions, data instructions, input/output instructions, and the loop instruction.&lt;/p&gt;
&lt;h2 id=&#34;pointer-instructions&#34;&gt;Pointer instructions&lt;/h2&gt;
&lt;p&gt;Instructions &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; move the data pointer through the buffer. For this task, address in register &lt;code&gt;r9&lt;/code&gt; should move eight positions (so the address moves a byte) forward or backwards.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;; &amp;gt; move data pointer forward
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;8&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;; &amp;lt; move data pointer backward
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-instructions&#34;&gt;Data instructions&lt;/h2&gt;
&lt;p&gt;Here, the byte stored in the address in register &lt;code&gt;r9&lt;/code&gt; is modified using a temporary register, &lt;code&gt;r10b&lt;/code&gt;. Then, the result value is stored back into the same address.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;; + add 1 to byte at data pointer
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;, [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;], &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;; - subtract 1 to byte at data pointer
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;, [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;], &lt;span style=&#34;color:#cb4b16&#34;&gt;r10b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;inputoutput-instructions&#34;&gt;Input/Output instructions&lt;/h2&gt;
&lt;p&gt;To provide the input and output data streams, I used system calls. These are functions provided and executed by the kernel that allow a program to interact with higher level functionality. Before calling a system call the register &lt;code&gt;rax&lt;/code&gt; must have the system call id number. Some system calls may take parameters from specific registers. The compiler uses the &lt;code&gt;sys_write&lt;/code&gt; and &lt;code&gt;sys_read&lt;/code&gt; system calls to read and write from &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_print_byte&lt;/code&gt; function prints an input byte on &lt;code&gt;stdout&lt;/code&gt;. Input byte must be store on the register &lt;code&gt;rcx&lt;/code&gt;. The function pushes the register &lt;code&gt;rcx&lt;/code&gt; into the stack. Then, it prepares the registers needed by the system call &lt;code&gt;sys_write&lt;/code&gt;. Register &lt;code&gt;rdi&lt;/code&gt; contains the file descriptor. In this case &lt;code&gt;stdout&lt;/code&gt; file descriptor is &lt;code&gt;1&lt;/code&gt;. Register &lt;code&gt;rsi&lt;/code&gt; has the address of the content to be written, in our case the stack address. Register &lt;code&gt;rdx&lt;/code&gt; has the length of the buffer. Finally, register &lt;code&gt;rax&lt;/code&gt; contains the system call id, for &lt;code&gt;sys_write&lt;/code&gt; the id is &lt;code&gt;1&lt;/code&gt;. Before calling &lt;code&gt;_print_byte&lt;/code&gt; function, the program will store on register &lt;code&gt;cl&lt;/code&gt; (lowest byte in register &lt;code&gt;rcx&lt;/code&gt;) the byte at data pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;_print_byte:
&lt;span style=&#34;color:#268bd2&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rcx&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; grow stack and push output byte to stack
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; file descriptor 1 is stdout
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rsi&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;rsp&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; stack address
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdx&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; number of bytes to print
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; system call 1 is write
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;syscall&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; call OS system call
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rcx&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; decrease stack
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;ret&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;; . call _print_byte function
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;cl&lt;/span&gt;, [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;_print_byte&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;_read_byte&lt;/code&gt; function is very similar to the &lt;code&gt;_print_byte&lt;/code&gt; function. The only difference is that &lt;code&gt;sys_read&lt;/code&gt; id number is &lt;code&gt;0&lt;/code&gt;, and the file descriptor for &lt;code&gt;stdin&lt;/code&gt; is also &lt;code&gt;0&lt;/code&gt;. After calling &lt;code&gt;_read_byte&lt;/code&gt; function, the program stores the byte returned by &lt;code&gt;_read_byte&lt;/code&gt; on &lt;code&gt;cl&lt;/code&gt; at data pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;_read_byte:
&lt;span style=&#34;color:#268bd2&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rsp&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; grow stack
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rsi&lt;/span&gt;, &lt;span style=&#34;color:#cb4b16&#34;&gt;rsp&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; stack address
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdi&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; file descriptor 0 is stdin
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rdx&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; number of bytes
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rax&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; syscall 0 is read
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;syscall&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; call OS system call
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;pop&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;rcx&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;; decrease stack and save input
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;ret&lt;/span&gt;

&lt;span style=&#34;color:#586e75&#34;&gt;; , call _read_byte function
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;_read_byte&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;], &lt;span style=&#34;color:#cb4b16&#34;&gt;cl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;loop-instruction&#34;&gt;Loop instruction&lt;/h2&gt;
&lt;p&gt;The instructions &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; are the C equivalent of &lt;code&gt;while (*ptr) { }&lt;/code&gt;. The assembly loop jumps into the comparison between the byte at data pointer and zero. If the value is not zero, the program jumps to the &lt;code&gt;_cloop&lt;/code&gt; tag. Between the &lt;code&gt;_cloop&lt;/code&gt; and &lt;code&gt;_loop&lt;/code&gt; tags, the compiler will put all the parsed Brainfuck code that was originally between &lt;code&gt;[&lt;/code&gt; and &lt;code&gt;]&lt;/code&gt; instructions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-GAS&#34; data-lang=&#34;GAS&#34;&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;jmp&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;_loop0&lt;/span&gt;
_cloop0:
&lt;span style=&#34;color:#586e75&#34;&gt;; [loop code]
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;_loop0:
&lt;span style=&#34;color:#268bd2&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;byte&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;cl&lt;/span&gt;, [&lt;span style=&#34;color:#cb4b16&#34;&gt;r9&lt;/span&gt;]
&lt;span style=&#34;color:#268bd2&#34;&gt;cmp&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;cl&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color:#268bd2&#34;&gt;jne&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;_cloop0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;building-the-compiler&#34;&gt;Building the compiler&lt;/h1&gt;
&lt;p&gt;Compiling a program can be described, in a very basic way, as a two parts process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Break the input program into the language components.&lt;/li&gt;
&lt;li&gt;Build the program using the language components and the language specification.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is where Lex-Yacc comes to use. Lex will help us parsing the input program from a series of characters to strings with certain meaning, called tokens. This process is known as lexical analysis. Yacc will generate a parser from a grammar. The parser will take the tokens and try to find a valid match for the grammar. In this process, the grammar rules will trigger actions that will create the output code.&lt;/p&gt;
&lt;h2 id=&#34;lexical-analysis&#34;&gt;Lexical analysis&lt;/h2&gt;
&lt;p&gt;Here, I will go into details about what the PLY Lex implementation needs to build a lexical analyzer. First thing, Lex requires a list of token names. I defined one token for each Brainfuck instruction.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;tokens &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;INCR_PTR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;DECR_PTR&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;INCR_VAL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;DECR_VAL&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;WRITE&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;READ&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;LB&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;RB&amp;#39;&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each token needs a rule to match the input with the token. Rules are defined as functions named as the token with the prefix &lt;code&gt;t_&lt;/code&gt;. Some rules are simple, and can be defined as regular expressions. I defined simple regular expressions for each Brainfuck instruction.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Simple Tokens&lt;/span&gt;
t_INCR_PTR &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\&amp;gt;&amp;#39;&lt;/span&gt;
t_DECR_PTR &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\&amp;lt;&amp;#39;&lt;/span&gt;
t_INCR_VAL &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\+&amp;#39;&lt;/span&gt;
t_DECR_VAL &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\-&amp;#39;&lt;/span&gt;
t_WRITE &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\.&amp;#39;&lt;/span&gt;
t_READ &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\,&amp;#39;&lt;/span&gt;
t_LB &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\[&amp;#39;&lt;/span&gt;
t_RB &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\]&amp;#39;&lt;/span&gt;

t_ignore &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\t&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#586e75&#34;&gt;# Ignored characters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some rules need to perform an action for every token they find. For example, I will set a rule to count the number of lines in order to indicate the line number in a compilation error. Also, I will treat any other characters the input program might have as comments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;t_newline&lt;/span&gt;(t):
    &lt;span style=&#34;color:#2aa198&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n+&amp;#39;&lt;/span&gt;
    t&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;lexer&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;lineno &lt;span style=&#34;color:#719e07&#34;&gt;+=&lt;/span&gt; t&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;value&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;count(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;t_error&lt;/span&gt;(t):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Ignore all other characters &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    t&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;lexer&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;skip(&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these, we can tell Lex to build the lexical analyzer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Build the lexer&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; ply.lex &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; lex
lex&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;lex()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;parsing-the-tokens&#34;&gt;Parsing the tokens&lt;/h2&gt;
&lt;p&gt;Yacc will generate our parser based on a &lt;a href=&#34;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Backus–Naur form (BNF) grammar&lt;/a&gt;
. The grammar I used is simple because Brainfuck programs are just a sequence of valid instructions. I defined two types of instructions: simple instructions (&lt;code&gt;&amp;gt; &amp;lt; + - . ,&lt;/code&gt;) and loops (&lt;code&gt;[ ]&lt;/code&gt;). Loops are treated as a different type of instructions because Brainfuck allows nested loops. The entire grammar is specified below.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;program : instruction

instruction : simpleInstruction
| loopInstruction
| simpleInstruction instruction
| loopInstruction instruction

loopInstruction : LB instruction RB

simpleInstruction : INCR_PTR
| DECR_PTR
| INCR_VAL
| DECR_VAL
| WRITE
| READ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Grammar rules are defined in Yacc as functions. These functions need the prefix &lt;code&gt;p_&lt;/code&gt; and take one parameter named &lt;code&gt;p&lt;/code&gt;. &lt;code&gt;p&lt;/code&gt; is an array containing the values of each grammar symbol in the corresponding rule. The rule is written in a triple quote comment after the function definition. The function body will be the actions that the rule will perform if it founds a match. Rules that are reduced should save in &lt;code&gt;p[0]&lt;/code&gt; the final result.&lt;/p&gt;
&lt;p&gt;The first rule defined will be the starting point for the parse. These is the starting rule for my compiler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_program&lt;/span&gt;(p):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#39;&amp;#39; program : instructions &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#719e07&#34;&gt;global&lt;/span&gt; global_success
    compile_program(p[&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;])
    global_success &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This rule will translate all the Brainfuck instructions into their assembly equivalents. The &lt;code&gt;compile_program&lt;/code&gt; function will replace Brainfuck operations into assembly instructions and save the result on a file. The next rules reduce all the instructions into the final &lt;code&gt;instructions&lt;/code&gt; symbol.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_instructions_expansion&lt;/span&gt;(p):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#39;&amp;#39; instructions : simpleInstruction instructions
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | loop_instruction instructions
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    p[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; p[&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;]

&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_instructions&lt;/span&gt;(p):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#39;&amp;#39; instructions : simpleInstruction
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | loop_instruction
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    p[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; p[&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rules to match the instructions will reduce the instruction within a wrapper structure. The wrapper will store the instruction type and the instruction (or instructions in case it is a loop).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;make_instruction_action&lt;/span&gt;(&lt;span style=&#34;color:#b58900&#34;&gt;type&lt;/span&gt;, payload):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Wraps the instruction content into a struct &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    obj &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; {}
    obj[INSTR_OBJ_PROP_TYPE] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;type&lt;/span&gt;
    obj[INSTR_OBJ_PROP_PAYLOAD] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; payload
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; obj

&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_loop_instruction&lt;/span&gt;(p):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34; loop_instruction : LB instructions RB
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    action &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; make_instruction_action(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;loop&amp;#39;&lt;/span&gt;, p[&lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;])
    p[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [action]


&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_simple_instruction&lt;/span&gt;(p):
    &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&amp;#34;&amp;#34;simpleInstruction : INCR_PTR
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | DECR_PTR
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | INCR_VAL
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | DECR_VAL
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | WRITE
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    | READ
&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    action &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; make_instruction_action(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;op&amp;#39;&lt;/span&gt;, p[&lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt;])
    p[&lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; [action]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I also defined a rule in case the parser encounters a error in the input program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;p_error&lt;/span&gt;(p):
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; p:
        &lt;span style=&#34;color:#b58900&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Syntax error at &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;%&lt;/span&gt; p&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;value)
    &lt;span style=&#34;color:#719e07&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color:#b58900&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Error, input program empty.&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, I just need to build the parser and give the compiler a starting point.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;import&lt;/span&gt; ply.yacc &lt;span style=&#34;color:#719e07&#34;&gt;as&lt;/span&gt; yacc
yacc&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;yacc()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;():
    &lt;span style=&#34;color:#719e07&#34;&gt;global&lt;/span&gt; global_compiled_filename
    parser &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; argparse&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;ArgumentParser()
    parser&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Brainfuck input file to be parsed&amp;#34;&lt;/span&gt;)
    parser&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;add_argument(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;-o&amp;#34;&lt;/span&gt;, help&lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;file name for the output assembly code&amp;#34;&lt;/span&gt;)
    args &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;parse_args()
    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;o:
        global_compiled_filename &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; args&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;o
    &lt;span style=&#34;color:#719e07&#34;&gt;try&lt;/span&gt;:
        f &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#b58900&#34;&gt;open&lt;/span&gt;(args&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;file, &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;)
        program_str &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;read()
        f&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;close()
        result &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; yacc&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;parse(program_str)

    &lt;span style=&#34;color:#719e07&#34;&gt;if&lt;/span&gt;(global_success):
        &lt;span style=&#34;color:#b58900&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Program compiled. To build the executable run:&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#cb4b16&#34;&gt;\n\t&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;x86asm -f elf64 &lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;.asm &amp;amp;&amp;amp; ld &lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;.o -o &lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;{0}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;format(global_compiled_filename))
    &lt;span style=&#34;color:#719e07&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#cb4b16&#34;&gt;IOError&lt;/span&gt;:
        sys&lt;span style=&#34;color:#719e07&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;Error, input file not found!&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;improvement-proposals&#34;&gt;Improvement proposals&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Optimize the compiler. Group pointer and data instructions to no repeat a lot of assembly code.&lt;/li&gt;
&lt;li&gt;Support reading/writing files. Perhaps the memory buffer can be loaded from/saved into a file.&lt;/li&gt;
&lt;li&gt;Extend Brainfuck specification to support variables and string constants.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bigger-challenge&#34;&gt;Bigger challenge&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Create a compiler to translate a subset of the C language to Brainfuck. Then, use this compiler to translate the Brainfuck code into assembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/brasm/&#34; target=&#34;_blank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Building a basic C/C&#43;&#43; project template</title>
      <link>https://eariassoto.github.io/post/building-a-basic-c-slash-c-plus-plus-project-template/</link>
      <pubDate>Mon, 17 Apr 2017 10:41:16 -0600</pubDate>
      
      <guid>https://eariassoto.github.io/post/building-a-basic-c-slash-c-plus-plus-project-template/</guid>
      <description>&lt;p&gt;Starting a C/C++ project can be as easy or as difficult as you want. Personally, I don&amp;rsquo;t like to fire up an IDE just for a small program. So, I end up using a text editor and compiling by terminal. However, the compilation process can get tedious. In this post, we will build a simple project template for a C/C++ program. This project will use the CMake tool to handle all the compilation process.&lt;/p&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template/tree/basic-template&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;requirements&#34;&gt;Requirements&lt;/h1&gt;
&lt;h2 id=&#34;cc-code-compiler&#34;&gt;C/C++ Code Compiler&lt;/h2&gt;
&lt;p&gt;The first thing we need is a C/C++ compiler. Most Linux distribution will have &lt;a href=&#34;https://gcc.gnu.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GCC&lt;/a&gt;
 installed by default. To check if you have GCC install run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ gcc --version
gcc &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;Ubuntu 6.3.0-12ubuntu2&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; 6.3.0 &lt;span style=&#34;color:#2aa198&#34;&gt;20170406&lt;/span&gt;
Copyright &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;C&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2016&lt;/span&gt; Free Software Foundation, Inc.
This is free software; see the &lt;span style=&#34;color:#b58900&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; copying conditions. There is NO
warranty; not even &lt;span style=&#34;color:#719e07&#34;&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you don&amp;rsquo;t get a similar message you need to install GCC. For Debian based distributions (Ubuntu, Linux Mint) you can install the &lt;strong&gt;build-essential&lt;/strong&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get update
$ sudo apt-get install build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;build-essential&lt;/strong&gt; package includes GCC and other required packages. In case you are using Windows, you can install &lt;a href=&#34;http://www.mingw.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;MinGW&lt;/a&gt;
 to install and setup GCC.&lt;/p&gt;
&lt;h2 id=&#34;cmake&#34;&gt;CMake&lt;/h2&gt;
&lt;p&gt;CMake is an open-source cross-platform project that provides a set of tools to build, test and install software. It uses configuration files to control the configuration process. The installation process should be easy, and for Debian bases distributions, you just need to run the command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ sudo apt-get install cmake
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For other Linux distributions or other OS check out &lt;a href=&#34;https://cmake.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;CMake official page&lt;/a&gt;
.&lt;/p&gt;
&lt;h1 id=&#34;project-structure&#34;&gt;Project structure&lt;/h1&gt;
&lt;p&gt;This is how our project folder will look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cpp-project-template/
├── CMakeLists.txt
├── include
├── src
│   └── main.cpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CMakeLists.txt&lt;/code&gt; is the configuration file for CMake. We will put our header files on &lt;code&gt;/include&lt;/code&gt; and our source files on &lt;code&gt;/src&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&#34;cmake-configuration-file&#34;&gt;CMake configuration file&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s see the first configuration file in more details:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;cmake_minimum_required&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2.8&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;PROY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;cpp-project-template&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;project&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROY&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;CXX&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, we need to set the minimum CMake version, in our case version 2.8. Then, we need to define a name for our project. Change the project name for one of your preference, the executable will be name after this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Source files folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;SRC_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;src&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Header files folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;INCL_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;include&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we set the folders that contain our code. If you are going to create additional folders, make sure to create proper variables for those folders too. We will need these variables to include our files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;# Compilation flags
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_CXX_FLAGS&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Werror&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can set our compilation flags in the &lt;code&gt;CMAKE_CXX_FLAGS&lt;/code&gt; variable. For our project we will be using C++11 version. The &lt;code&gt;-Wall&lt;/code&gt; flag enables all warning, and the &lt;code&gt;-Werror&lt;/code&gt; flag treat warnings as errors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;include_directories&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;INCL_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Important: Include all source files on this list
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;SOURCE&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/main.cpp&lt;/span&gt;
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;include_directories&lt;/code&gt; command will include our headers to the build. Also, we need to fill in &lt;code&gt;SOURCE&lt;/code&gt; variable with all of our source files. Otherwise, CMake will not compile our source files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${PROJECT_SOURCE_DIR}/bin&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;add_executable&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROY&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Unit tests
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;add_subdirectory&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;tests&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY&lt;/code&gt; specifies where CMake will save our output files. In our case, executables will be on &lt;code&gt;/bin&lt;/code&gt; folder. Finally, the &lt;code&gt;add_executable&lt;/code&gt; command will create a executable file with our source files.&lt;/p&gt;
&lt;h1 id=&#34;using-the-template&#34;&gt;Using the template&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s define a &lt;code&gt;Vector&lt;/code&gt; class. For simplicity, we are going to represent 2D vectors. Also, our class will implement some basic operations between vectors.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#ifndef __VECTOR_H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#define __VECTOR_H__
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// System includes
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;Vector&lt;/span&gt; {
&lt;span style=&#34;color:#719e07&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  Vector(&lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; a1, &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; a2) &lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt; a1(a1), a2(a2){};

  Vector &lt;span style=&#34;color:#268bd2&#34;&gt;sum&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec);
  Vector &lt;span style=&#34;color:#268bd2&#34;&gt;substract&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec);
  Vector &lt;span style=&#34;color:#268bd2&#34;&gt;scale&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; k);
  &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;dot&lt;/span&gt;(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec);

  &lt;span style=&#34;color:#268bd2&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;getA1&lt;/span&gt;() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; a1; };

  &lt;span style=&#34;color:#268bd2&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;getA2&lt;/span&gt;() &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; a2; };

  &lt;span style=&#34;color:#719e07&#34;&gt;friend&lt;/span&gt; std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;operator&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;(std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;ostream &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;os, &lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec) {
    os &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vec.a1 &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vec.a2 &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; os;
  }

&lt;span style=&#34;color:#719e07&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; a1;
  &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; a2;
};

&lt;span style=&#34;color:#719e07&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;/* __VECTOR_H__ */&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Vector.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
Vector Vector&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;sum(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec) {
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; Vector{a1 &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; vec.getA1(), a2 &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; vec.getA2()};
}

Vector Vector&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;substract(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec) {
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; Vector{a1 &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; vec.getA1(), a2 &lt;span style=&#34;color:#719e07&#34;&gt;-&lt;/span&gt; vec.getA2()};
}
Vector Vector&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;scale(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; k) { &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; Vector{k &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; a1, k &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; a2}; }
&lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; Vector&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;dot(&lt;span style=&#34;color:#719e07&#34;&gt;const&lt;/span&gt; Vector &lt;span style=&#34;color:#719e07&#34;&gt;&amp;amp;&lt;/span&gt;vec) {
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; a1 &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; vec.getA1() &lt;span style=&#34;color:#719e07&#34;&gt;+&lt;/span&gt; a2 &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt; vec.getA2();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s create a couple of vectors and output the results on our main function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span style=&#34;color:#586e75&#34;&gt;// System includes
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#586e75&#34;&gt;// Program includes
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;#34;Vector.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#268bd2&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#dc322f&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#dc322f&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;*&lt;/span&gt;argv[]) {
  Vector vector1(&lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;2&lt;/span&gt;);
  Vector vector2(&lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#2aa198&#34;&gt;5&lt;/span&gt;);
  &lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt; k &lt;span style=&#34;color:#719e07&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#dc322f&#34;&gt;double&lt;/span&gt;)&lt;span style=&#34;color:#2aa198&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;10&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Vector 1: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector1 &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Vector 2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector2 &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Vector 1 + Vector 2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector1.sum(vector2) &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Vector 1 - Vector 2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector1.substract(vector2) &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; k &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34; * Vector 2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector1.scale(k) &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  std&lt;span style=&#34;color:#719e07&#34;&gt;::&lt;/span&gt;cout &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;Vector 1 dot product Vector 2: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; vector1.dot(vector2)
            &lt;span style=&#34;color:#719e07&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;;
  &lt;span style=&#34;color:#719e07&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we have to change the project name and include our new source files. Here are the &lt;code&gt;CMakeLists.txt&lt;/code&gt; file with the necessary changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;color:#b58900&#34;&gt;cmake_minimum_required&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;2.8&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;PROY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;math-vector-example&lt;/span&gt;)
&lt;span style=&#34;color:#b58900&#34;&gt;project&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROY&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;C&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;CXX&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Source files folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;SRC_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;src&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Header files folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;INCL_DIR&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;include&lt;/span&gt;)

&lt;span style=&#34;color:#586e75&#34;&gt;# Compiler flags
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_CXX_FLAGS&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Werror&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;include_directories&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROJECT_SOURCE_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;INCL_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt; (&lt;span style=&#34;color:#2aa198&#34;&gt;SOURCE&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/main.cpp&lt;/span&gt;
&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SRC_DIR&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#2aa198&#34;&gt;/Vector.cpp&lt;/span&gt;
)

&lt;span style=&#34;color:#586e75&#34;&gt;# Output folder
&lt;/span&gt;&lt;span style=&#34;color:#586e75&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b58900&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#2aa198&#34;&gt;CMAKE_RUNTIME_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span style=&#34;color:#2aa198&#34;&gt;&amp;#34;${PROJECT_SOURCE_DIR}/bin&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#b58900&#34;&gt;add_executable&lt;/span&gt; (&lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;PROY&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#719e07&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#268bd2&#34;&gt;SOURCE&lt;/span&gt;&lt;span style=&#34;color:#719e07&#34;&gt;}&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To compile our program, we will need to run these commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mkdir build
$ &lt;span style=&#34;color:#b58900&#34;&gt;cd&lt;/span&gt; build
$ cmake ..
$ make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You only need to create the &lt;code&gt;build/&lt;/code&gt; folder once. The &lt;code&gt;cmake ..&lt;/code&gt; command will generate the makefiles and &lt;code&gt;make&lt;/code&gt; will build the program. If everything went all right, the executable will be saved in the &lt;code&gt;bin/&lt;/code&gt; folder. Let&amp;rsquo;s run our example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./../bin/math-vector-example
Vector 1: &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;3, 2&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
Vector 2: &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;10, 5&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
Vector &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; + Vector 2: &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;13, 7&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
Vector &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; - Vector 2: &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;-7, -3&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
0.3 * Vector 2: &lt;span style=&#34;color:#719e07&#34;&gt;(&lt;/span&gt;0.9, 0.6&lt;span style=&#34;color:#719e07&#34;&gt;)&lt;/span&gt;
Vector &lt;span style=&#34;color:#2aa198&#34;&gt;1&lt;/span&gt; dot product Vector 2: &lt;span style=&#34;color:#2aa198&#34;&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s pretty much it. Now go and write your own programs without much hassle.&lt;/p&gt;
&lt;p&gt;&lt;a class=button href=&#34;https://github.com/eariassoto/cpp-project-template/tree/basic-template&#34; target=&#34;%5fblank&#34;&gt;Get the code on GitHub&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>